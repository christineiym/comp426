[{"content":"git is a distributed version control system that keeps track of the changes between plaintext source files. It can be used for collaboration or for managing and keeping track of workflows for individuals. While primarily intended for software source code, git works with any plaintext files, and so can also be used for authoring of other kinds.\ngit basics git official documentation\nYou should become conversant with the official documentation for git. It has everything you need to know, all in one place.\ngit - The Simple Guide (Download PDF)\nThe guide above is, hands down, the best, most straightfoward guide to get you going or refresh your memory for git commands.\n[An Ultimate Guide to git and GitHub - Suhail Kakar](https://dev.to/suhailkakar/an-ultimate-guide-to- git-and-github-20j)\nGit Cheat Sheet - GitHub\nGit Tutorials and Training - Atlassian\nUsing gitignore You can place a file in the root of your repository directory named .gitignore and add paths which will be specifically excluded by git when you add files and commit changes. This is a good idea to do with Node.js packages in particular, since otherwise you are just moving around a bunch of dependencices that can be automatically downloaded by npm instead.\nHow to add folder to gitignore - Edpresso Team\nA collection of .gitignore templates\nThis is a good resource. You will likely want to add the text from Node.gitignore to your .gitignore file for most assignments.\n","description":"Save your your whole workflow (and your sanity) with git. Never lose edits again.","id":0,"section":"guide","tags":null,"title":"git","uri":"https://comp426.johndmart.in/guide/git/scm/"},{"content":"GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. It also adds a social interaction layer to the process of managing version-controlled source files.\nGitHub Basics Hello World - GitHub Guides\nKeeping GitHub forks up to date with upstream source Keeping your forked repo synced with the upstream source - Nitin Venkatesh\nSyncing a fork - GitHub Help\n","description":"Keep your git repos in the cloud for redundancy and collaboration.","id":1,"section":"guide","tags":null,"title":"GitHub","uri":"https://comp426.johndmart.in/guide/git/hub/"},{"content":"GitHub Actions allows for testing, compiling, and other workflow tasks to be performed on GitHub after you push to a repository housed there. COMP 426 uses these for autograding and other basic evaluation of assignments when you submit them. It is useful to become familiar with how it works so that you can monitor your autograded assignments when you submit them.\nGitHub Actions - GitHub Docs\n","description":"Automate a variety of test and compile workflows server-side on GitHub.","id":2,"section":"guide","tags":null,"title":"GitHub Actions","uri":"https://comp426.johndmart.in/guide/git/hubactions/"},{"content":"GitHub Classroom allows your instructors to distribute starter code for assignments, automatically create and manage repositories for student work, and automatically grade work sumbitted by push to GitHub. This is how all assignments will be managed for COMP426.\nYou can install an extension in VSCode that will let you simplify the process of accepting and submitting assignments.\nInstall GitHub Classroom extension on VSCode\n","description":"Interact with the assignments for COMP 426 in a GitHub Classroom instance.","id":3,"section":"guide","tags":null,"title":"GitHub Classroom","uri":"https://comp426.johndmart.in/guide/git/hubclassroom/"},{"content":"HTML and CSS The first real assignment is meant to get you comfortable with the basics of HTML and CSS. Whether you know it very well already or if you need a refresher, going through this module and then a01 should put you in a good position to continue through the rest of the assignments.\nKnowing these markup languages is very important for being a good web developer. Both HTML and CSS are straightforward and well-documented.\nWeb langauges and platforms and frameworks change very rapidly and you will, as a web developer, spend a career learning new languages and platforms and frameworks. You will constantly be learning and teaching yourself new things. If you take no other lessons away from this class, take this one: get comfortable looking things up and learning things on your own. It is the only way.\nThe list of resources belows, for example, are the kinds of things that you will want to learn how to find online. Google. Everything.\nHTML describes the web page\u0026rsquo;s structure while CSS describes how that structure should be styled. We are going to provide you a short online course so you can familiarize yourself with these two languages. In the second (after the initial setup) assignment we will be making a simple website using just HTML and CSS. Remember all the assignments are already published so you can look ahead and see what kinds of things you will be expected to do.\nIf you find anything overly confusing, ask on Piazza or reach out during office hours. We will be making it very clear what you will be expected to know for a test when it comes time for that. If you can do the upcoming HTML and CSS assignment a01 without looking things up, then you can consider yourself a genius-level expert. If you can complete a01 while referencing the endless trove of documentation available online, then you are like the rest of us and have a pretty decent working knowledge that is good enough to do web development.\nHTML and CSS is probably the most googleable topic you will ever come across in your CS career. Don\u0026rsquo;t be afraid to look things up, but make sure you aren\u0026rsquo;t just copy-pasting things from Stack Overflow either.\nRecommendations for self Study Code Academy CodeAcademy - Learn HTML and CSS\nYou will have to sign up for an account, but it is totally free. You should complete the following tutorials:\nHTML  Elements and Structure Tables (know the basics) Forms (know the basics there will be an assignment on this later) Semantic HTML (optional and not required, just make yourself familiar with it so you can sound smart if you see it at a job)  CSS  Selectors and Visual Rules The Box Model Display and Positioning Colors (optional) Typography (optional) Grid (Skip this and learn basic Flex) CSS Transitions (optional)  w3schools The w3schools site is an excellent resource for the markup and programming languages that we will be using in this course. Get comfortable working through the tutorials both as self-study resource and as a reference tool.\n w3schools HTML w3schools CSS  Mozilla Developer Network (MDN) The Mozilla Developer Network has excellent guides and documentation on all things related to web development.\n MDN HTML MDN CSS.  TutorialsPoint For those of you who just want to read things I\u0026rsquo;d check out TutorialsPoint\u0026rsquo;s pages on HTML and CSS. I don\u0026rsquo;t think the CSS one is very good and you would be better off with the Code Academy one.\nAssessment There is no graded assessment component for course modules. We will not be giving you graded quizzes or anything. However, it will be effectively impossible to successfully work through any aspect of this course going forward without famililarity manipulating, writing, and editing HTML and CSS.\nHere is a list of online quizzes that you can and should take on your own to test and evaluate your knowledge. It would behoove you to take these quizzes and then review things that you find difficult. Practice.\n GeeksforGeeks w3schools HTML Quiz w3schools CSS Quiz ProProfs HTML Quiz with Answers Khan Academy HTML/CSS Recap TutorialsPoint HTML 5 Online Quiz TutorialsPoint CSS Online Quiz CSS Portal CSS Quiz Quizizz HTML and CSS Quiz 1  ","description":"Knowing how to write, edit, and manipulate HTML and CSS is integral to web development. Here are some pointers for refreshing your HTML and CSS skills.","id":4,"section":"module","tags":null,"title":"mod01 HTML + CSS Crash Course","uri":"https://comp426.johndmart.in/module/mod01/"},{"content":"What is it? This is a class about building things that make the web go. We\u0026rsquo;re going to learn how to do that by doing that.\nWhat are we doing? This semester we are going to focus on systems for collecting and managing public health information because we are in an ongoing public health crisis and that seems really relevant.\nCOVID-19 is still a thing We\u0026rsquo;re going to be doing Zoom class for the first few weeks until we see how things are going around campus with COVID-19. None of us want to be in a room with 210 other people all breathing the same air right in the middle of a pretty bad surge of a highly transmissible variant of SARS-COV-2 (Omicron edition).\nAfter we start meeting in-person, I will still host all sessions live on Zoom and record them.\nIf you are sick AT ALL IN ANY WAY, then DO NOT COME TO CLASS.\nLog into Zoom or watch the sessions later instead.\nWhat are we going to learn about? We will learn to use a bunch of Node.js packages and write a bunch of JavaScript. We will learn to build and use RESTful APIs. We will learn to build front-end interfaces using JS, HTML, and CSS to send and retrieve information to and from an API/back-end, respectively. Yes, we will make something with React also.\nWhat are the assignments? There is a series of individual assignments intended to help you develop the skills necessary for working on your final project assignment.\nYou will work in a team on a final project application that deals with public health information, which you will begin planning in the second week of class.\nWhat about grades? Grading will be done on a scale of 1,000,000 points. Literally.\nGrading will also be done by robots. We will give you qualitative feedback, too!\nAre there exams? Yeah, but they are not really like the exams you are used to. The exams assess familiarity with concepts and are really an assessment of my teaching rather than your ability to memorize things.\nWhat will class be like? Sometimes I will talk about conceptual stuff on slides. Sometimes I will do live demos of things related to your assignments.\nHow do we do things? We will use GitHub. We will talk about open source and licensing. We will learn how to work collaboratively.\nCTRL+C CTRL+V? Do your own work (but ask for help when you need it). Do original work (but find things that inspire you and build on them). Don\u0026rsquo;t plagiarize existing work (seriously, don\u0026rsquo;t). Reference things that you find useful. Follow the license terms of any code you adapt and identify where it comes from.\n*sigh* Everything is a lot right now. Will it ever get better? Mental health and general well-being are important. We can\u0026rsquo;t learn anything if we are beset at all sides by stress. We have to tke care of ourselves and each other or we are nowhere.\nBe kind to one another and the instructional staff. The instructional staff will be kind to you and we\u0026rsquo;ll all learn some interesting stuff this semester.\n","description":"There is a lot of information here. Please enjoy this no-bs summary.","id":5,"section":"syllabus","tags":null,"title":"tl;dr","uri":"https://comp426.johndmart.in/syllabus/tldr/"},{"content":"Technical skills Working through this course facliltates students to exercise a range of skils:\n Design and build RESTful API endpoints for access to a server-side information source (database, third-party API, etc.) Design objects using the JavaScript prototype-based object model Employ functional programming techniques implemented in JavaScript for asynchronous event-handling Use asynchronous techniques to implement client-server interactions with a RESTful API Manipulate the Document Oject Model (DOM) using a variety of techniques for presenting information client-side Construct client-side/browesr-based interactive applications/interfaces Use CSS and HTML for basic aesthetics in interface design  Planning and management skills In addition to the above, students will be able to:\n Manage source code using git and GitHub Basic package structure using Node.js Jump-start prototyping with JS libraries like React, Next.js, and Express and CSS frameworks like Bulma and Bootstrap Plan and manage projects while collaborating with a team Ask design questions for basic interaction flows  ","description":"Working through this course should give students a range of skils related to building and implementing web back-end and front-end applications as well competency in collaborative development and project management.","id":6,"section":"syllabus","tags":null,"title":"Course objectives","uri":"https://comp426.johndmart.in/syllabus/objectives/"},{"content":"Class sessions We will combine demonstrations and lectures with hand-on work in class. Some class time will be reserved for you to work with your teams.\nRemote availability Class sessions are all going to be available to stream live on Zoom. This is intended to help manage dealing with the uncertainty of conditions this semester.\nSession recordings Sessions will all be recorded and archived in Panopto so that you can access them later.\nResources Readings Resources for conceptual information and technical documentation will all be linked from the session pages on the course site. You are not expected to buy any books or other resources for this course. All assigned resources will be open educational resources or otherwise available online.\nSoftware All of the software required for this course is freely available for distribution online and open source. You are not expected to purchase licenses for any software required for this course.\nAttendance and participation Attendance in class sessions is expected but does not have to always be in-person. There will be interactive components in the class sessions and you will need to interact with other students. These things can be done remotely in some cases.\nWe will not be taking attendance but trust that you will make every effort to attend class sessions and engage with the class. It is to your benefit to do so.\n","description":"Class sessions will be hyflex even when we are running in-person and will combine conceptual discussions and demos. All resources will be made available through the course website. Attendance is expected, but does not have to be in-person all the time. We will be very flexible with how you engage with the class due to COVID-19.","id":7,"section":"syllabus","tags":null,"title":"Course structure","uri":"https://comp426.johndmart.in/syllabus/structure/"},{"content":"In a03, we\u0026rsquo;re writing some basic JS functions that can be called to return values outside of a web browser. This module includes some information and links about JS functions and a walkthrough of creating a very basic set. Some of this is covered in the a03 instructions as well. You can use this as a reference to expand on the information presented in the instructions.\nHow do functions work in JavaScript? Functions in JS work prettymuch the way that functions in any langauge work. You are defining something that can be invoked to do a specific set of tasks so that you do not have to write instructions for those tasks over and over again.\n One weird trick: if you find yourself doing something more than once, then you should probably rwrite a function instead of doing that thing over and over again.\n Functions have a very straightforward definition syntax comprising a few parts:\n name, which invokes the function; parameters, which define local variables as arguments when the function is invoked; and code that gets executed by the function.  If we want to get some sort of information out of our function, then we will need our code to include a return, which is all the stuff that you expect the function to spit out so you can do something else with it.\nBasic function definition syntax looks like this:\n1 2 3 4  function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   As you can see, you can use // to comment single lines in your code inside a function. You can also comment multiple lines by using */ and /* to wrap whatever you want to comment between them. These work across the board in JS and you should be using them in order to leave information for your self. There are tons of examples of comments in a03.\nExport / Import In addition to writing basic functions, we want to be able to olexport them so that we can call them in other places. This requires just a simple modification to the basic syntax listed above:\n1 2 3 4  export function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   Lets\u0026rsquo;s say we have the above code saved in a file called exports.js.\nTo import the same function, you would need the following in another file, we\u0026rsquo;ll call it main.js. We\u0026rsquo;ll also add an invocation of the function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; name(5,6);   In order to get the above to spit out the return value in the terminal, we need to wrap the call in the above block of code with a console.log() function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; console.log(name(5,6));   That should spit out 11 if we were to run main.js in a terminal with node.\nHello, world. In this section, we will do a pretty basic walkthrough for creating, exporting, and importing a \u0026ldquo;Hello, world\u0026rdquo; function. This example will sort of mirror what you are doing in a03.\nGet set up First, open a terminal and create a new directory.\n$ mkdir helloworld Then, let\u0026rsquo;s create some files to get ourselves started.\n$ cd helloworld $ touch helloworld.js $ touch functions.js Then lets initialize our directory as an npm package. You can just accept the defaults suggested by npm.\n$ *npm* init In order to run this, we\u0026rsquo;ll need some help from the ESM package, so let\u0026rsquo;s go ahead and install that now.\n$ *npm* install esm  Normally when you want to run a .js file you just use the command line and call node FileName.js. But because the es6 import and export syntax is experimental in node, we need to use a package called ESM. For us, the user, the only difference is that we now run our node command as follows: node -r esm FileName.js. ESM will not be required in later versions of node.\n Write some code! Now we can open helloworld.js and we\u0026rsquo;ll put the following code in it.\n1 2 3  export function helloWorld(message) { return `Hello, world ${message}` }   Save that script and let\u0026rsquo;s think about what we just did for a minute.\nIn the above script we are defining a function helloWorld() and exporting it so that we can import it and then invoke it elsewhere. It has one parameter, which we have defined as message. Whatever value we insert as the message is going to get returned after the words \u0026ldquo;Hello, world\u0026rdquo;. If you leave the function empty, it will just return \u0026ldquo;Hello, world.\u0026rdquo;\nSo if we want to say \u0026ldquo;Hello, world and exit\u0026rdquo;, then we would call `helloWorld(\u0026lsquo;and exit\u0026rsquo;). There are other ways to do this. The code you see above is one example of how to do this. You may find other examples that work and that is fine.\nNow we need to import our function and call it.\nOpen the main.js file that we created earlier. Put the following in it.\n1 2 3  import {helloWorld} from \u0026#34;./helloworld\u0026#34;; console.log(helloWorld(\u0026#39;and exit\u0026#39;));   Now, what are we doing here?\nWe are importing our previously defined and exported function helloWorld from the helloworld.js script we created earlier. We are using a path relative to our current working directory: ./ means \u0026ldquo;this directory.\u0026rdquo; Since helloworld.js is stored in the same directory, ./helloworld.js means \u0026ldquo;the hello_world.js script stored in this directory.\u0026rdquo; You\u0026rsquo;ll notice that you don\u0026rsquo;t have to put the file extension in the script. Node will assume that we are asking for a JS file.\nNext, we are invoking our function helloWorld(). If we just invoke that on its own, it will not output anything in the terminal. To get it to do that, we need to wrap the function call in console.log().\nSave that file and we\u0026rsquo;ll see if it works!\nRun it! Alright, we\u0026rsquo;ve written some scripts and we have our directory set up with npm. We should be ready to run this and see if it works.\nTo run your script, run the first line in the example below and you should see the output on the second line:\n$ node -r esm main.js Hello world, and exit. You can also have Node run this interactively so that you can change what the function is saying.\nRun:\nnode -i -r esm \u0026gt; The \u0026gt; means that we are in an interactive node session and it is expecting us to type something. So lets type some stuff. Let\u0026rsquo;s import our function (HINT: we do the same thing that we did in the file, but just live on the command line).\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; Don\u0026rsquo;t worry about the \u0026ldquo;undefined\u0026rdquo; thing. It\u0026rsquo;s misleading. It is saying that here was no console output defined, so it echoes \u0026ldquo;undefined.\u0026rdquo;\nWe can turn this off, but for now we\u0026rsquo;re not going to worry about it.\nNext let\u0026rsquo;s see what happens if we continue with our interactive Node session and call our helloWorld() function with different arguments.\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; helloWorld() 'Hello, world undefined' \u0026gt; helloWorld('') 'Hello, world ' \u0026gt; helloWorld('.') 'Hello, world .' \u0026gt; helloWorld('and exit.') 'Hello, world and exit.' \u0026gt; Press CTRL+C twice or type .exit to exit the Node interactive session.\nAnd that\u0026rsquo;s it! We did it! We defined a function, exported it, imported it, and made it do things!\nnpm test If you open up package.json you will notice that there is a field for a test.\nWe left this undefined earlier, but let\u0026rsquo;s define it so that we have another way of running a test of our function.\nLet\u0026rsquo;s put the command that we used to run our main.js file in that field as a test.\nTo do this, make your package.js file look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;name\u0026#34;: \u0026#34;helloworld\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;node -r esm main.js\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;esm\u0026#34;: \u0026#34;^3.2.25\u0026#34; } }   Now, we can run the following in the terminal and it will run the command we set as a test and should generate output that looks like the example below.\n$ npm test \u0026gt; helloworld@1.0.0 test \u0026gt; node -r esm main.js Hello, world and exit. This all feeds directly into a03, which will have you defining a bunch of functions that do different things.\n","description":"Get started writing and calling basic functions in JavaScript.","id":8,"section":"module","tags":null,"title":"mod03 JavaScript Functions","uri":"https://comp426.johndmart.in/module/mod03/"},{"content":"Assignments This is a tentative list of assignments. These may be adjusted or merged depending on how the course flows.\n   Assignment Title Topics covered     a00 Setup Installing software; git and Github; bash/command line   a01 Node Package management; creating packages; Node.js; npm   a02 Functions Running JavaScript as program; JavaScript functions   a03 API Turning functions into endpoints; REST; Express   a04 Get Getting information from an API in a web interface; Next.js   a05 Post Sending information to an API from a web interface   a06 Async Asynchronous interactions; Database interactions   a07 DOM Manipulating the Document Object Model; CSS and HTML   a08 Users Implementing login; React; Wouter   a09 Security Passwords; Protecting user info   a99 Final project Collaboration; Project planning and management    Assignment submission All assignments will be handled by GitHub classroom. Pushing code to the repository created when you accept assignments will submit the assignment for grading.\nYou can submit (push) as many times as you need to in order to pass the unit tests configured in GitHub classroom.\nThere are due dates for the assignments, but think of these as guideposts to help you keep up so that you do not get behind. The due date will not cut off submission. You will be able to submit or resubmit after the due date has passed.\nFinal project Your final project will be developed with a team.\nThis Spring, we are going to focus our attention on public health information apps and systems. Your team will design an app that fits one of the following profiles or similar:\n Public health information dashboard Public health information tracking app (reporting test or vaccine status, etc.) Public health resource tracking app (availability of testing, masks, PPE, vaccination, other supplies, etc.) Emergency management information portal (planning and decision-making for institutions, government, agencies, etc.) Outbreak/cluster tracking app or dashboard Public health information app for end users (to provide useful information and aggregate credible sources)  Your team will use GitHub to plan and manage your project. You will create documentation for both developers and users of your app. You will also create demos as part of that documentation.\nPresenting final projects You will present your final project to the class on 19, 21, or 26 April. It is okay for your project to still be a work in progress when presented.\nAll final project materials will be due on the day scheduled for the final exam.\nAssessments There will be several assessments throughout the course.\nYou will take a questionnaire at the beginning of the course that gives us a baseline for your familiarity with certain tools and concepts.\nThere will also be midterm and final questionnaires, but they will not assess specific knowledge in the way a traditional exam does. Instead they will assess your familiarity with concepts and tools that we are using in the course and allow us to compare across the semester.\nThe midterm and final will include a self-assessment component and also an assessment of your team dynamics.\nThese assessments are designed to evaluate our teaching effectiveness as much as they are designed to assess your skill and familiarity with concepts and tools.\n","description":"There will be a series of programming assignments, a final team project to develop a web application, and several assessments.","id":9,"section":"syllabus","tags":null,"title":"Deliverables and assessments","uri":"https://comp426.johndmart.in/syllabus/assignments/"},{"content":"Grade breakdown Grading will be based on 1,000,000 points. The breakdown is as follows.\n   Component Description Quantity Points Subtotal     Assignments Individual programming assignments 10 50,000 500,000   Final project Team-based app development 1 300,000 300,000   Assessments Questionnaires 3 50,000 150,000   Engagement GitHub commits 100 500 50,000   Total    1,000,000    Components Assignments Each of the individual programmin assignments will be worth 50,000 points and will be automatically evaluated. The autograders will give you feedback so that you can make adjustments to your code to debug it so that it passes the unit tests.\nFinal project points breakdown    Component Description Points     Group planning Documentation of your planning process 50,000   API Back-end API has defined endpoints that you can make queries against. 75,000   Interface Front-end connects to and interacts with API endpoints and stores/retrieves user or other information. 75,000   Documentation There is documentation about what you did and how it works. 50,000   Demo Walkthrough/clickthrough screencap demo of your app and presentation to class. 50,000   Total  300,000    Every member of your team will receive the same number of points for the final project.\nYou will check in with a TA assigned to your team throughout the semester as you plan and build. We will give you qualitative feedback on your work throughout and as part of the final presentation.\nAssessments Questionnaires given at the beginning, middle, and end of the semester.\nEngagement Your engagement score is a count of your GitHub commits. I am gathering this directly from your GitHub repositories submitted for your assignments and your team\u0026rsquo;s final project repos.\nI will gather these counts to encourage you to commit small changes meaning that there should be a lot of them.\nThe number that you are responsible for is actually relatively few. You should easily be able to record over 100 commits over the course of the semester across 10 assignments and the final project. In fact, you should have WAY more than that.\n","description":"Your work in this class will be evaluated in a mostly automated way that gives you immediate feedback. You will also receive qualitative feedback. Grades are reckoned on a 1,000,000-point scale.","id":10,"section":"syllabus","tags":null,"title":"Evaluation","uri":"https://comp426.johndmart.in/syllabus/evaluation/"},{"content":"The University of North Carolina at Chapel Hill has had a student-led honor system for over 100 years. Academic integrity is at the heart of Carolina and we all are responsible for upholding the ideals of honor and integrity. The student-led Honor System is responsible for adjudicating any suspected violations of the Honor Code and all suspected instances of academic dishonesty will be reported to the Honor System. Information, including your responsibilities as a student, is outlined in the Instrument of Student Judicial Governance. Your full participation and observance of the Honor Code are expected.\nWhat does this mean for a programming class where we are encouraging collaboration? It means that you should do original work in concert with other members of your group. Assign credit appropriately. Help each other learn how to do things.\nOn individual assignments, you should be writing your own code. But if you need help, then seek it out.\nDo not copy + paste code from the Internet. If you are inspired by open source code, then make a reference to the source in a comment. If you adapt open source code, then adhere to its license and make sure that your work is licensed appropriately.\n","description":"The University of North Carolina at Chapel Hill has had a student-led honor system for over 100 years. Academic integrity is at the heart of Carolina and we all are responsible for upholding the ideals of honor and integrity.","id":11,"section":"syllabus","tags":null,"title":"Honor Code","uri":"https://comp426.johndmart.in/syllabus/honor/"},{"content":"Counseling and Psychological Services (CAPS) CAPS is strongly committed to addressing the mental health needs of a diverse student body throughtimely access to consultation and connection to clinically appropriate services, whether for short or long-term needs.\nGo to their website: https://caps.unc.edu/ or visit their facilities on the third floor of the Campus Health Services building for a walk-in evaluation to learn more.\nHelp us help you If you are struggling, speak to a TA and/or the instructor. We can and will make adjustments that will help you to better cope and thrive in this class.\nThings are hard. You are not alone.\n","description":"It's important to take care of your emotional and mental health and well-being. You cannot learn things if you are in distress. There are resources available to you and we can help you find them.","id":12,"section":"syllabus","tags":null,"title":"Mental health and well-being","uri":"https://comp426.johndmart.in/syllabus/wellbeing/"},{"content":"Accessibility Resources The University of North Carolina at Chapel Hill facilitates the implementation of reasonable accommodations, including resources and services, for students with disabilities, chronic medical conditions, a temporary disability or pregnancy complications resulting in barriers to fully accessing University courses, programs and activities.\nAccommodations are determined through the Office of Accessibility. Resources and Service (ARS) for individuals with documented qualifying disabilities in accordance with applicable state and federal laws. See the ARS Website for contact information: https://ars.unc.edu or email ars@unc.edu.\nAccommodation plans If you have an accommodation plan, please feel welcomed to make an appointment or come to instructor office hours to discuss it. I would like to make sure that we are honoring your plan.\nMost likely, I will work to incorporate accommodations into the course design. This way, we increase the accessibility of the entire course, for everyone.\n","description":"The University of North Carolina at Chapel Hill facilitates the implementation of reasonable accommodations, including resources and services, for students with disabilities, chronic medical conditions, a temporary disability or pregnancy complications resulting in barriers to fully accessing University courses, programs and activities.","id":13,"section":"syllabus","tags":null,"title":"Accessibility","uri":"https://comp426.johndmart.in/syllabus/accessibility/"},{"content":"Title IX Resources Any student who is impacted by discrimination, harassment, interpersonal (relationship) violence, sexual violence, sexual exploitation, or stalking is encouraged to seek resources on campus or in the community.\nPlease contact the Director of Title IX Compliance (Adrienne Allison – Adrienne.allison@unc.edu), Report and Response Coordinators in the Equal Opportunity and Compliance Office (reportandresponse@unc.edu), Counseling and Psychological Services (confidential), or the Gender Violence Services Coordinators (gvsc@unc.edu; confidential) to discuss your specific needs. Additional resources are available at safe.unc.edu.\n","description":"Any student who is impacted by discrimination, harassment, interpersonal (relationship) violence, sexual violence, sexual exploitation, or stalking is encouraged to seek resources on campus or in the community.","id":14,"section":"syllabus","tags":null,"title":"Title IX","uri":"https://comp426.johndmart.in/syllabus/title9/"},{"content":"Ch-ch-ch-ch-changes The instructor reserves to right to make changes to the syllabus, including any project due dates, assessment dates, assignments, or other aspects of the schedule and structure.\nThings change. We live in uncertain times. We will adjust the course accordingly if it becomes necessary to do so.\n","description":"The instructor reserves to right to make changes to the syllabus, including any project due dates, assessment dates, assignments, or other aspects of the schedule and structure.","id":15,"section":"syllabus","tags":null,"title":"Disclaimer","uri":"https://comp426.johndmart.in/syllabus/disclaimer/"},{"content":"JavaScript Functions - w3schools\nFunctions - JavaScript - Mozilla Developer Network\nDifferences Between var and let - JavaScript Tutorials\n","description":"Some guides related to using functions in JavaScript.","id":17,"section":"guide","tags":null,"title":"JS Functions","uri":"https://comp426.johndmart.in/guide/javascript/functions/"},{"content":"Application Programming Interface (API) An API is the interface layer between two pieces of software that don\u0026rsquo;t necessarily speak the same langauge. The function of an API is to translate from one platform/piece of software to another.\nAn API call is a process through which requests are made and data is retrieved from an API by a client. It looks something like this:\n A client makes a request for some data. The requested data is retrieved from an external resource. The data is delivered to the client.  Data can also be manipulated by the API if write actions are permitted.\n A client requests that new data be added and supplies that data. The request is processed by some sort of middleware that interacts with an external resource. Confirmation of receipt and is returned to the client.  RESTful services and CRUD operations REST stands for \u0026ldquo;REpresentational State Transfer\u0026rdquo; and the architecture was originally proposed in a doctoral dissertation at University of California, Irvine by Roy Fielding in 2000.\nThe architecture for a RESTful service meets the following constraints:\n It has a client-server architecture: the user interface is separate from data storage. You will see this referred to as \u0026ldquo;front-end\u0026rdquo; (client) and \u0026ldquo;back-end\u0026rdquo; (server). It is stateles: all requests from the client must contain all information necessary for the server to process the request. State information has to remain on the client and cannot be stored on the server. It must have a client-side cache: this reduces the number of requests made to the server because the client can reuse information that it already has. It must have a uniform interface: this means that the architecture of the client-server interaction is simplified so that the two can be changed independently while still maintaining the same functionality. A uniform interface, as defined, has 4 parts:  Resources: Universal Resource Identifiers (URIs) that identify resources Representation manipulation: a representation of a resource must contain all of the information necessary to modify the resources itself. Self-contained messages: messages must include all information necessary to interpret them. Hypermedia as state: Clients communicate application state through requested URIs, body contents, query-string parameters, and request headers. Servers communicate application state back to clientsas URIs to retrieve objects, body contents, response codes, and response headers.   It must be a layered system: this restricts knowledge to the immediate layer with which the client is interacting by setting up a hierarchy of intermediaries. This is where middleware and distributed resources come into play. It must be capable of code-on-demand: this means that if the API documentation is avaialable, then it should be possible to create or extend a client based on the available endpoints. This constraint is optional, but it does mean that even if documentation is not available, it should be possible to reverse-engineer API calls.  HTTP methods and status codes You will want to familiarize yourself with REST API terminology and structure. Pay special attention to HTTP methods and status codes.\nThe REST API Tutorial\nSQL databases SQL is a language for interacting with data held in databases. SQL uses \u0026ldquo;statements\u0026rdquo; to structure queries. Statements are effectively commands and are (sort of) human readable.\nSome examples of SQL statements relevant to this class:\n1 2 3 4 5 6  CREATE TABLE table1 ( id INTEGER PRIMARY KEY, var1 TEXT, var2 TEXT ) INSERT INTO table1 (var1, var2) VALUES (somedata, someotherdata) SELECT * FROM table1 SELECT * FROM table1 WHERE id = 5 UPDATE table1 SET var1 = COALESCE(somenewdata,var1), var2 = COALESCE(othernewdata,var2) WHERE id = 5 DELETE * FROM table1 WHERE id = 5   Familiarize yourself with how SQL statements work. There are many, many resources available online.\n w3c SQL Tutorial SQL Tutorial for Beginners  We are using SQLite3 for this course, which implements SQL in locally stored database files that do not require a server. The syntax is basically the same, with a few differences.\nWe will be using a JS implementation of SQLite3 called better-sqlite. Full documentation of that implemntation is available here.\nExpress.js Express.js is a \u0026ldquo;minimalist\u0026rdquo; web framework that can be used to create both front- and backend applications in JavaScript. We will be using it to develop an API and consider its frontend components as well.\nExpress will be the main point of translation for connecting API endpoints to a database in our assignments.\nTranslation table The following is a table of \u0026ldquo;verbs\u0026rdquo; related to different components of our API ecosystem. This is provided to demonstrate how they relate to one another across languages and frameworks in both conceptual and practical terms.\n   CRUD SQL HTTP Express What does it do?     Create INSERT POST app.post() Makes a new record.   Read SELECT GET app.get() Retrieves an existing record.   Update (replace) REPLACE PUT app.put() Searches for a record and overwrites it. If it doesn\u0026rsquo;t exist, the record is createed.   Update (modify) UPDATE PATCH app.patch() Modifies the information in an existing record.   Delete DELETE DELETE app.delete() Removes an existing record.    ","description":"","id":18,"section":"module","tags":null,"title":"mod04 REST, CRUD, and databases","uri":"https://comp426.johndmart.in/module/mod04/"},{"content":"Node.js v16.10.0 documentation\nECMAScript Modules (ESM) ECMAScript Modules (ESM) documentation\nUsing ECMAScript modules (ESM) with Node.js - Diogo Souza\n","description":"Node.js makes it possible to create and package JavaScript applications and manage dependencies.","id":19,"section":"guide","tags":null,"title":"Node","uri":"https://comp426.johndmart.in/guide/javascript/node/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Mac running OSX.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome.\u0026rdquo; Accept the Agreement. Open the installer and follow it through completion.  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download/ Select the \u0026ldquo;Macintosh Installer\u0026rdquo; under the LTS tab. After the download completes, open the installer. Follow the installation instructions using the default settings to completion.  git - Developer Tools  Click on the Spotlight icon, the magnifying glass in the top right corner of your screen (or press Command+Space) Type in the word \u0026ldquo;Terminal\u0026rdquo; and press Enter. In the window that pops up, type in the word \u0026ldquo;git\u0026rdquo; and press enter. You will be prompted to install Command Line Developer Tools. Agree to this, even if you are on battery power. Let the installation complete.  You will also find a good guide to get started with installing git here.\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Mac zip file  Double click the downloaded \u0026ldquo;VSCode-darwin-stable.zip\u0026rdquo; file. This extracts and creates an application named \u0026ldquo;Visual Studio Code\u0026rdquo; in your downloads folder. Drag the \u0026ldquo;Visual Studio Code\u0026rdquo; file from your Downloads folder to your Applications folder. You should see the Applications folder in the left-hand sidebar of your Finder window.  Restart your computer once all software has been installed.\nReturn to a00 main page\n","description":"Instructions for installing required software on Mac OSX","id":20,"section":"guide","tags":null,"title":"Software Setup for Mac OSX","uri":"https://comp426.johndmart.in/guide/software/mac/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Windows computer.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome\u0026rdquo; Accept the Agreement Open the ChromeSetup.exe installer and press \u0026ldquo;Yes\u0026rdquo; if prompted for permission to install  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download Select the \u0026ldquo;Windows Installer\u0026rdquo; under the LTS tab. If given the option, select the 64-bit option.  After the download completes, open the installer. Continue through the installation screens using the default settings until the install is complete.  git and bash - Developer Tools  Follow this link: https://git-scm.com/downloads Select \u0026ldquo;Windows\u0026rdquo;  After the download completes, open it. Continue through the installation screens using the default settings until the install is complete.  You also will find a good guide to get started with installing git here.\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Windows installer  Open the downloaded installer Continue through the installation screens using the default settings until the install is complete.  Return to a00 main page\n","description":"Instructions for installing required software on Windows","id":21,"section":"guide","tags":null,"title":"Software setup for Windows","uri":"https://comp426.johndmart.in/guide/software/windows/"},{"content":"Here are some links to validators that you can use to check your assignment code. We will run all your code through a validator as part of your assignment submission. You should too.\nValidators will tell you exactly what you need to know to fix the errors in your code.\nHTML, CSS, etc. W3C Markup Validation Service (HTML)\nW3C has a bunch of different validators that can check CSS, web platforms (mobile ready), dead links, RSS, and one that checks all of these things.\nCollection of W3C validators\nJSON JSONLint - The JSON Validator\nJSON Formatter (Best JSON Formatter and Validator)\nJSON Formatter and Validator\nJavaScript JSHint, a JavaScript Code Quality Tool\nJavaScript Validator - Code Beautify\nOnline JavaScript Validator - BeautifyTools\n","description":"","id":22,"section":"guide","tags":null,"title":"Validators","uri":"https://comp426.johndmart.in/guide/validators/"}]