[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"https://comp426.johndmart.in/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"docs","tags":null,"title":"Basic Usage","uri":"https://comp426.johndmart.in/docs/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"April 2019","uri":"https://comp426.johndmart.in/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"docs","tags":null,"title":"Configuration","uri":"https://comp426.johndmart.in/docs/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"March 2019","uri":"https://comp426.johndmart.in/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"docs","tags":null,"title":"Installation","uri":"https://comp426.johndmart.in/docs/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"updates","tags":null,"title":"February 2019","uri":"https://comp426.johndmart.in/updates/2019_february/"},{"content":"The purpose of this is assignment is to get familiar with the tools that we will be using in COMP 426 for the rest of the semester as well as the assignment submission process.\nNote that this first assignment, a00, is graded only for completion. Future assignments will be much deeper in scope, and you should expect to spend significantly more time on them.\nInstall Required Software Below are links to guides for installing the required software for this course.\nThis software must be installed on your computer not only so you can complete the assignments, but also so you can receive help in office hours.\nYou will be installing the following:\n Chrome Browser (web browser) Node.js (Javascript Runtime) git (version control/wofkflow management) and bash (command shell, if not already installed) VSCode (text editor)  You do not have to use a specific text editor for this class. HOWEVER, you should use a code editor that has good syntax highlighting.\nVisual Studio Code is recommended for COMP 426, and is also configured as the web-based IDE for our GitHub classroom assignments.\nIf you are willing to sign up for a (free) student license, then WebStorm is also a good choice.\nWhenever you are installing software for development purposes, you should pay attention to version and backward compatibility.\nUnderstand the difference between current or latest versions and the Long Term Support (LTS) versions of packages you are using.\nFor either guide below the course currently supports Node version 14.17.5 (LTS) or 16.8.0 (Latest).\nWindows If you are running Windows, follow the Windows setup guide.\nMac If you have a Mac running OSX, follow the Mac setup guide.\nLinux If you run Linux, and you don\u0026rsquo;t already have the above list installed, you can follow the Linux setup guide\nJoin GitHub classroom Use the assignment link for this assignment provided in both Sakai and Piazza to join the GitHub classroom.\n  Make sure you are logged into GitHub: https://github.com/login If you do not have a GitHub account, then create one and log in.\n  Use the assignment link for this assignment provided in both Sakai and Piazza to join the GitHub classroom.\n  When you follow invite link, you will be presented with a list of email addresses. Find your email address in the list and select it.\n  On the next page, click the green button that says \u0026ldquo;Accept this assignment.\u0026rdquo;\n  Read the text on the page that follows. It will say that it is configuring your repository and that you should refresh the page.\n  Refresh the page.\n  You will now see a page that shows a link to your repository. NB: This repository doesn\u0026rsquo;t exist under your GH account directly, but under the \u0026ldquo;organization\u0026rdquo; that owns the GitHub Classroom (jdmar3-comp426).\n  Open the link to your repository page for a00, which should have the form of https://github.com/jdmar3-comp426/a00-YOURGITHUBUSERNAME.\n  Set Up Workspace Now that you have installed all the preqrequisite software and joined our GitHub classroom, you can create your workspace and organize yourself for class.\nOur recommendation is that you create a directory called \u0026ldquo;comp426\u0026rdquo; or something similar which you will use to keep all of your work in.\nYou will have a repository for each assignment and so you can use this directory to clone all of your repos into.\nSome of the assignments have their own starter code and some are just blank repos that you will commit your code to and then push back up to GitHub.\nClone the starter code repo There are multiple ways to clone a repo and get yourself up and running.\nBelow we will detail doing this in VSCode and in a Bash shell.\nVSCode  Open Visual Studio Code (You can also do this by clicking on the VSCode button right in your repo page.  You will have to authorize VSCode to use your GH account to install a GitHub Classroom plugin.) 2. Click the Explorer tab on the left. You will see a button that says \u0026ldquo;Clone Repository\u0026rdquo; (hopefully).\n Follow the prompts for authorizing VSCode to use your GH account.\n  You should see a bar at the top that says \u0026ldquo;Provide repository URL or pick a repository source.\u0026rdquo;\n  Go back to your repository page for your repository and click the green button that says \u0026ldquo;Code.\u0026rdquo;\n  Copy the repo link.\n  Paste the link into the repository bar and press enter.\n  It will prompt you for a location to clone the repo into.\n  Once it is cloned, VSCode will ask if you want to open the cloned repository. Open it.\n  You should now see the contents of your repository in VSCode.\n  BASH $ cd Documents $ mkdir comp426 $ cd comp426 $ git clone https://github.com/jdmar3-comp426/a00-YOURGITHUBUSERNAME.git Cloning into 'a00-johnmar3'... remote: Enumerating objects: 12, done. remote: Counting objects: 100% (12/12), done. remote: Compressing objects: 100% (10/10), done. remote: Total 12 (delta 2), reused 2 (delta 0), pack-reused 0 Receiving objects: 100% (12/12), 14.37 KiB | 7.19 MiB/s, done. Resolving deltas: 100% (2/2), done. $ cd a00-YOURGITHUBUSERNAME $ ls Et voila! You are in the directory containing your repository! You should be able to see the base files in the repository after your ls command. Now you can open in it whatever editor you wish.\nDownload Dependencies The COMP 426 code that you downloaded uses a few \u0026ldquo;dependencies.\u0026rdquo; Dependencies are another word for additional libraries and packages written by third-party developers that are required and used internally by the COMP 426 code. In the early days of programming, managing dependencies was time consuming and difficult. Luckily, nowadays Node.js comes with a fantastic built-in tool, called Node Package Manager (npm), which is designed to automatically manage JavaScript dependencies for you.\nNpm is a command line tool, which means it only works through the terminal (aka command line). We\u0026rsquo;ll learn a lot more about how to use npm later in the semester, but for now we\u0026rsquo;ll use its most basic fundamental feature: automatically selecting and downloading all relevant libraries to your computer.\n This course requires basic familiarity with the terminal, especially for using tools like npm. Don\u0026rsquo;t worry if you don\u0026rsquo;t feel comfortable with the terminal just yet\u0026mdash;the assignment guides will walk you through the most important commands. In the long run, however, having a working knowledge of the command line is a very valuable skill, especially for aspiring software engineers. With this in mind, it may benefit you to make sure you fully understand every command we use. If you\u0026rsquo;re looking to learn more about using the terminal, the linux commands cheat sheet is a great resource.\n The following steps guide you through opening a terminal window from Visual Studio Code and using npm to automatically install dependencies.\n To open a terminal from Visual Studio Code, open the \u0026ldquo;View\u0026rdquo; menu and select \u0026ldquo;Integrated Terminal\u0026rdquo; (or just \u0026ldquo;Terminal\u0026rdquo; on Mac). A new terminal window should have opened in the bottom panel of Visual Studio Code. Type the following command into the terminal and then press enter:  1  $ npm install   Wait for this process to complete. If warnings appear in the terminal, it\u0026rsquo;s safe to ignore them.   The command npm install tells npm to look in the file named package.json, which should contain a list of dependencies to install, and install these dependencies. By default, the downloaded dependencies are placed into a special directory named node_modules. After the command completes, you should be able to find both package.json and node_modules in the left side panel of Visual Studio Code. Try clicking on them to see what\u0026rsquo;s inside.\n Again, we\u0026rsquo;ll learn a lot more about how to use npm in a later assignment (a02, to be exact).\nCreate a demo project After completing the last section, your computer should be set up for developing websites in COMP 426! Let\u0026rsquo;s run through a quick demo to make sure everything works.\nFor this demo, we\u0026rsquo;re going to pretend we\u0026rsquo;re starting a new web dev project. We\u0026rsquo;ll set up a new project directory using npm and Visual Studio Code. Pay close attention to this process, because you\u0026rsquo;ll want to repeat it every time you start working on a new COMP 426 assignment. In fact, this process can even be used outside of class in the real world to get set up working on new web-based projects.\nCreate a project directory and initialize with npm The first step for starting a new project is usually to create a new folder that will store your project code. However, for this assignment and for others, you will already have a directory created when you clone your assignment repo. You can see these folders in the left side panel of Visual Studio Code, which shows the file explorer.\nThe file explorer can be toggled open or closed by clicking on the pictured icon.\nIf you were going to be creating a new project folder, you could do it by right clicking in the empty space at the bottom of the explorer and clicking \u0026ldquo;New Folder.\u0026rdquo; However, for this demo we will just use the existing folder \u0026ldquo;a00-YOURGITHUBUSERNAME\u0026rdquo;.\nNext, right click on the folder \u0026ldquo;a00-YOURGITHUBUSERNAME\u0026rdquo; and click \u0026ldquo;Open in Terminal.\u0026rdquo; This will open a new terminal window pointing at the a00-YOURGITHUBUSERNAME folder. This raises an important fact about terminals\u0026mdash;they always point to a specific folder location in your computer. Usually, the terminal prompt will give some indication of which folder it is currently pointing at. For instance, you might see something like this:\n1  your-computer-name:a00-YOURGITHUBUSERNAME yourname$   The important thing here is a00-YOURGITHUBUSERNAME, which indicates that you are currently in the a00-YOURGITHUBUSERNAME folder.\nThere is a special terminal command, pwd, which tells you exactly which folder the terminal is currently in. pwd stands for \u0026ldquo;print working directory.\u0026rdquo; Try running pwd in your terminal window now, and verify that it is pointing to the a00-YOURGITHUBUSERNAME folder.\n1 2  $ pwd /home/YOURUSERNAME/Documents/comp426/a00-YOURGITHUBUSERNAME    Whenever you are working on a particular assignment, it is absolutely crucial that you run any related terminal commands from inside the assignment\u0026rsquo;s folder.\n Once you have confirmed that your terminal is pointing to the a00 folder, run the command npm init. This command tells npm to create a brand new web project in the current folder. As part of the initialization process, it\u0026rsquo;ll ask you a long list of questions about your new web project. It\u0026rsquo;s okay to just press enter through all the prompts.\n1  $ npm init    What does running npm init actually do? It\u0026rsquo;s actually pretty simple: it just creates a new package.json file in the current directory. The package.json file is npm\u0026rsquo;s version of a configuration file for your entire web project. It includes lots of valuable information about your project including the project\u0026rsquo;s name, version, description, and author. It also includes a list of the dependencies that your project relies on, and a list of custom scripts, or actions, that may be a part of your web application. The answers you type to the questions asked during the npm init process are used to add more information to the package.json file that is created for your project.\n At this point, the a00-YOURGITHUBUSERNAME folder should now have a brand new package.json file with the following contents:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;name\u0026#34;: \u0026#34;a00\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }   Install Browsersync Next, we\u0026rsquo;re going to use npm to add our first dependency to the new a00 web project. The package we\u0026rsquo;ll add is called Browsersync, and it will help make web development much easier! Browsersync is a \u0026ldquo;dev server,\u0026rdquo; and its job is to show you what your website looks like in real time as you actively make changes to your code. Browsersync works by pretending to be a real web server, running in the background on your computer and monitoring changes to the files in your project directory. Although it\u0026rsquo;s optional, you may wish to install and use Browsersync when working on all assignments for COMP 426.\nTo install Browsersync as a dependency for a00-YOURGITHUBUSERNAME, run the following command inside the a00-YOURGITHUBUSERNAME terminal:\n1  $ npm install browser-sync    Remember back in Section 2.2 when we ran npm install to install dependencies for the COMP 426 code? This time we\u0026rsquo;re adding the extra word (called a command line argument) browser-sync to the command. This tells npm to search online for the package named browser-sync, add it as a dependency to our new project a00, and download it. One simple command automatically added a powerful third-party program to your new app\u0026mdash;without even writing a single line of code! We\u0026rsquo;ll be using npm install a lot this semester to add other third-party packages to our code.\n Note: To get credit for a00, you must have Browsersync added as a dependency to your project.\nAdd some HTML Next, let\u0026rsquo;s add some html. Right click on the a00-YOURGITHUBUSERNAME folder, select \u0026ldquo;New File,\u0026rdquo; and name the new file index.html.\nWrite (do not copy and paste) the following code into the new file and save:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Assignment 0 test!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Looking good!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Go ahead and edit me.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Commit changes You have just added a file. Save it and then look at the tabs on the left. You should see one that has a blue dot with a number: it is the source control tab. This means that you have changes you need to commit.\nYou can review the changes and explore the tree, etc. For now, click the check mark, which will trigger a commit. A bar will appear at the top asking you to write a commit message. Write something meaningful to let your future self know what you did: \u0026ldquo;added index.html\u0026rdquo;.\nTo make a commit in your terminal from inside the a00-YOURGITHUBUSERNAME directory, run the following:\n$ git add -v . $ git commit -a -m \u0026quot;added index.html\u0026quot; The first command adds any new files that you created. The second command commits the changes and leaves a log message. Make commits anytime you add or edit files after you have tested them to make sure they are working properly. To test them, keep following these instructions.\nStart the development server With the simple index.html file in place, its time to see if things actually work. Using the terminal inside the a00i-YOURGITHUBUSERNAME folder, run the following command to start the development server:\n1  $ npx browser-sync start -sw   A browser window should have been automatically opened, showing the HTML page we created in the prior step. If not, open http://localhost:3000/ in Google Chrome. You should see the text inside the \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; and \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; now being rendered on the website.\n Note: The command npx browser-sync start -sw is worth memorizing, especially if you plan to use Browsersync for assignments in COMP 426 (which is highly recommended). Browsersync is actually quite a powerful tool, although we won\u0026rsquo;t get into the more advanced features. If you\u0026rsquo;re interested in learning more, here\u0026rsquo;s a list of the supported command line options. The -sw part of the command tells Browsersync to serve your files locally and actively watch for changes that you may be making to the code. Because we didn\u0026rsquo;t install the browser-sync globally we need to use the npx command to run it locally.\n Edit Some HTML The beauty of using a local web server as you develop is that every time you save your changes, the updated version of the website will be immediately shown in the browser window.\nTo demonstrate this, we\u0026rsquo;re about to make a change to the index.html file created in Section 3.3. The instant you save the changes you make, you should see the webpage automatically reload to reflect the change. This makes development much easier and faster. Get used to this workflow because it is an industry standard and it should make A1 much easier!\nChange line 11 from:\n1  \u0026lt;p\u0026gt;Go ahead and edit me.\u0026lt;/p\u0026gt;   to:\n1  \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Almost done I promise.\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;   Save the changes you made, and watch the webpage instantly reload in the browser!\n If you\u0026rsquo;re on Windows, save by pressing Ctrl + S on your keyboard. If you\u0026rsquo;re on a Mac, save by pressing Cmd + S.  Stop the development server You may have noticed that back in Visual Studio Code, the terminal panel still looks something like this:\nThere\u0026rsquo;s no dollar-sign prompt ($), and the terminal won\u0026rsquo;t let you type text into it. This is because Browsersync is still running and is using up that whole terminal. If you ever needed access to a second terminal while Browsersync was running, you could always start up another one with View -\u0026gt; Terminal.\n Visual Studio Code understands that you may need to use multiple terminals at once, and it provides an easy way to switch between them: the small drop-down to the right of the word \u0026ldquo;TERMINAL\u0026rdquo; in the screenshot above. Clicking that drop-down displays a list of all the active terminals running in Visual Studio Code. You can kill, or delete, a terminal with the trash can icon. This immediately terminates whatever process is running in the terminal and shuts that terminal down. Other terminals in Visual Studio Code will be unaffected by this action.\n Whenever you finish working, you may wish to stop the Browsersync development server. One way to do this is by clicking the trash can icon, thereby killing the whole terminal window. Another way is to click back on the terminal that has Browsersync running (see screenshot above) and press the Ctrl + C keys on your keyboard. This should exit Browsersync and return the terminal back to a dollar-sign prompt ($).\n Pressing the Ctrl + C keys while working in a terminal sends a special interrupt (SIGTSTP or \u0026ldquo;terminal stop\u0026rdquo;) to the process currently running on that terminal. That interrupt forces the process to close.\n Submit the assignment If you\u0026rsquo;ve made it to this point, you\u0026rsquo;ve finished a00. The final step is to push the code you created.\nAll assignments in COMP 426 will be submitted by pushing code back to the repository you cloned.\nPush your code  In VSCode, go to the source control tab that you used before. Make sure that all of the changes are committed. Click the little three dot menu a few items away from the check mark. Select \u0026ldquo;Push\u0026rdquo; from the dropdown menu.  THAT\u0026rsquo;S IT! YOU\u0026rsquo;RE DONE WITH THE FIRST ASSIGNMENT!\nThe autograder will do its thing and you should be able to see if your code meets all the requirements by clicking on the Actions tab in your GH repo after you have pushed. The autograder can take a minute or two, so be patient.\nIf your code doesn\u0026rsquo;t pass one of the tests, try to figure out why it didn\u0026rsquo;t pass, fix the error, commit, and push.\nYou can commit and push changes as many times as you need to pass all the tests. This goes for every assignment, not just this one. You always have the option of pushing new changes to autograded assignment repos.\nA note about HTML validation If you copied and pasted the HTML from the above block into index.html, then it will not parse as valid because there are intentional whitespace errors in the example block that you probably missed. It is good practice to run your HTML through a validator. Get into the habit of doing this and learning how to read the output so that you can deal with errors. Familiarize yourself with the W3C validator: https://validator.w3.org, which you can use to validate the HTML for this assignment.\n","description":"This assignment for COMP 426 will help you get through setting up tools and installing some of the basic software you will need to have for the course. It is a walkthrough for installing and setting up your development environment, including: Node.js, VIsual Studio Code, Chrome, git, and using GitHub Classroom for submissions.","id":7,"section":"assignment","tags":null,"title":"a00 This is all a setup","uri":"https://comp426.johndmart.in/assignment/a00/"},{"content":"Markdown here\n","description":"test post","id":8,"section":"docs","tags":null,"title":"Quick Start","uri":"https://comp426.johndmart.in/docs/gettingstarted/quickstart/"},{"content":"Markdown here\n","description":"test post","id":9,"section":"updates","tags":null,"title":"January 2019","uri":"https://comp426.johndmart.in/updates/2019_january/"},{"content":"HTML and CSS In past synchronous semesters, this course had several class periods covering the basics of HTML and CSS. Knowing these markup languages (not considered programming languages) is very important for being a good web developer. Both HTML and CSS are straightforward and well documented. Since many of you have some experience with HTML and CSS, this component of the class is going to be self directed.\nOther langauges and platforms and frameworks change very rapidly and you will, as a web developer, spend a career learning new languages and platforms and frameworks. You will constantly be learning and teaching yourself new things. If you take no other lessons away from this class, take this one: get comfortable looking things up and learning things on your own. It is the only way.\nThe list of resources belows, for example, are the kinds of things that you will want to learn how to find online. Google. Everything.\nHTML describes the web page\u0026rsquo;s structure while CSS describes how that structure should be styled. We are going to provide you a short online course so you can familiarize yourself with these two languages. In the second (after the initial setup) assignment we will be making a simple website using just HTML and CSS. Remember all the assignments are already published so you can look ahead and see what kinds of things you will be expected to do.\nWe are essentially expecting you to teach yourself HTML and CSS if you are not already familiar. If you find anything overly confusing, ask on Piazza or reach out during office hours. We will be making it very clear what you will be expected to know for a test when it comes time for that. If you can do the upcoming HTML and CSS assignment (a01) without constantly looking things up you can consider yourself an expert.\nHTML and CSS is probably the most googleable topic you will ever come across in your CS career. Don\u0026rsquo;t be afraid to look things up, but make sure you aren\u0026rsquo;t just copy-pasting things from Stack Overflow either.\nRecommendations for self Study Code Academy CodeAcademy - Learn HTML and CSS\nYou will have to sign up for an account, but it is totally free. You should complete the following tutorials:\nHTML  Elements and Structure Tables (know the basics) Forms (know the basics there will be an assignment on this later) Semantic HTML (optional and not required, just make yourself familiar with it so you can sound smart if you see it at a job)  CSS  Selectors and Visual Rules The Box Model Display and Positioning Colors (optional) Typography (optional) Grid (Skip this and learn basic Flex) CSS Transitions (optional)  w3schools The w3schools site is an excellent resource for the markup and programming languages that we will be using in this course. Get comfortable working through the tutorials both as self-study resource and as a reference tool.\n w3schools HTML w3schools CSS  Mozilla Developer Network (MDN) The Mozilla Developer Network has excellent guides and documentation on all things related to web development.\n MDN HTML MDN CSS.  TutorialsPoint For those of you who just want to read things I\u0026rsquo;d check out TutorialsPoint\u0026rsquo;s pages on HTML and CSS. I don\u0026rsquo;t think the CSS one is very good and you would be better off with the Code Academy one.\nAssessment There is no graded assessment component for this phantom assignment. It will be effectively impossible to successfully work through any aspect of this course going forward without famililarity manipulating, writing, and editing HTML and CSS.\nHere is a list of online quizzes that you can and should take on your own to test and evaluate your knowledge. It would behoove you to take these quizzes and then review things that you find difficult. Practice.\n GeeksforGeeks w3schools HTML Quiz w3schools CSS Quiz ProProfs HTML Quiz with Answers Khan Academy HTML/CSS Recap TutorialsPoint HTML 5 Online Quiz TutorialsPoint CSS Online Quiz CSS Portal CSS Quiz Quizizz HTML and CSS Quiz 1  ","description":"Knowing how to write, edit, and manipulate HTML and CSS is integral to web development. Here are some pointers for refreshing your HTML and CSS skills.","id":10,"section":"assignment","tags":null,"title":"Web Skills Crash Course","uri":"https://comp426.johndmart.in/assignment/webrefresh/"},{"content":"Markdown here\n","description":"test post","id":15,"section":"docs","tags":null,"title":"Related content","uri":"https://comp426.johndmart.in/docs/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":16,"section":"docs","tags":null,"title":"Page Resources","uri":"https://comp426.johndmart.in/docs/pageresources/"},{"content":"Markdown here\n","description":"test post","id":17,"section":"docs","tags":null,"title":"Page Bundles","uri":"https://comp426.johndmart.in/docs/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":18,"section":"docs","tags":null,"title":"Content Formats","uri":"https://comp426.johndmart.in/docs/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":19,"section":"docs","tags":null,"title":"Image Processing","uri":"https://comp426.johndmart.in/docs/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":20,"section":"docs","tags":null,"title":"Shortcodes","uri":"https://comp426.johndmart.in/docs/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":21,"section":"docs","tags":null,"title":"Frontmatter","uri":"https://comp426.johndmart.in/docs/contentmanagement/frontmatter/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":23,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://comp426.johndmart.in/blog/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":24,"section":"docs","tags":["markdown","css","html","themes"],"title":"Section","uri":"https://comp426.johndmart.in/docs/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":25,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://comp426.johndmart.in/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","description":"","id":26,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://comp426.johndmart.in/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":27,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"https://comp426.johndmart.in/blog/emoji-support/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Mac running OSX.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome.\u0026rdquo; Accept the Agreement. Open the installer and follow it through completion.  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download/ Select the \u0026ldquo;Macintosh Installer\u0026rdquo; under the LTS tab. After the download completes, open the installer. Follow the installation instructions using the default settings to completion.  git - Developer Tools  Click on the Spotlight icon, the magnifying glass in the top right corner of your screen (or press Command+Space) Type in the word \u0026ldquo;Terminal\u0026rdquo; and press Enter. In the window that pops up, type in the word \u0026ldquo;git\u0026rdquo; and press enter. You will be prompted to install Command Line Developer Tools. Agree to this, even if you are on battery power. Let the installation complete.  Visual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Mac zip file  Double click the downloaded \u0026ldquo;VSCode-darwin-stable.zip\u0026rdquo; file. This extracts and creates an application named \u0026ldquo;Visual Studio Code\u0026rdquo; in your downloads folder. Drag the \u0026ldquo;Visual Studio Code\u0026rdquo; file from your Downloads folder to your Applications folder. You should see the Applications folder in the left-hand sidebar of your Finder window.  Restart your computer once all software has been installed.\nReturn to a00 main page\n","description":"Instructions for installing required software on Mac OSX","id":28,"section":"guide","tags":null,"title":"Software Setup for Mac OSX","uri":"https://comp426.johndmart.in/guide/software/mac/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Windows computer.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome\u0026rdquo; Accept the Agreement Open the ChromeSetup.exe installer and press \u0026ldquo;Yes\u0026rdquo; if prompted for permission to install  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download Select the \u0026ldquo;Windows Installer\u0026rdquo; under the LTS tab. If given the option, select the 64-bit option.  After the download completes, open the installer. Continue through the installation screens using the default settings until the install is complete.  git and bash - Developer Tools  Follow this link: https://git-scm.com/downloads Select \u0026ldquo;Windows\u0026rdquo;  After the download completes, open it. Continue through the installation screens using the default settings until the install is complete.  Visual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Windows installer  Open the downloaded installer Continue through the installation screens using the default settings until the install is complete.  Return to a00 main page\n","description":"Instructions for installing required software on Windows","id":29,"section":"guide","tags":null,"title":"Software setup for Windows","uri":"https://comp426.johndmart.in/guide/software/windows/"}]