[{"content":"The purpose of this is assignment is to get familiar with the tools that we will be using in COMP 426 for the rest of the semester as well as the assignment submission process.\nNote that this first assignment, a00, is graded only for completion. Future assignments will be much deeper in scope, and you should expect to spend significantly more time on them.\nInstall Required Software Below are links to guides for installing the required software for this course.\nThis software must be installed on your computer not only so you can complete the assignments, but also so you can receive help in office hours.\nYou will be installing the following:\n Chrome Browser (web browser) Node.js (Javascript Runtime) git (version control/wofkflow management) and bash (command shell, if not already installed) VSCode (text editor)  You do not have to use a specific text editor for this class. HOWEVER, you should use a code editor that has good syntax highlighting.\nVisual Studio Code is recommended for COMP 426, and is also configured as the web-based IDE for our GitHub classroom assignments.\nIf you are willing to sign up for a (free) student license, then WebStorm is also a good choice.\nWhenever you are installing software for development purposes, you should pay attention to version and backward compatibility.\nUnderstand the difference between current or latest versions and the Long Term Support (LTS) versions of packages you are using.\nFor either guide below the course currently supports Node version 14.17.5 (LTS) or 16.8.0 (Latest).\nWindows If you are running Windows, follow the Windows setup guide.\nMac If you have a Mac running OSX, follow the Mac setup guide.\nLinux If you run Linux, and you don\u0026rsquo;t already have the above list installed, you can follow the Linux setup guide\nJoin GitHub classroom Use the assignment link for this assignment provided in both Sakai and Piazza to join the GitHub classroom.\n  Make sure you are logged into GitHub: https://github.com/login If you do not have a GitHub account, then create one and log in.\n  Use the assignment link for this assignment provided in both Sakai and Piazza to join the GitHub classroom.\n  When you follow invite link, you will be presented with a list of email addresses. Find your email address in the list and select it.\n  On the next page, click the green button that says \u0026ldquo;Accept this assignment.\u0026rdquo;\n  Read the text on the page that follows. It will say that it is configuring your repository and that you should refresh the page.\n  Refresh the page.\n  You will now see a page that shows a link to your repository. NB: This repository doesn\u0026rsquo;t exist under your GH account directly, but under the \u0026ldquo;organization\u0026rdquo; that owns the GitHub Classroom (jdmar3-comp426).\n  Open the link to your repository page for a00, which should have the form of https://github.com/jdmar3-comp426/a00-$YOURGITHUBUSERNAME``.\n  Set Up Workspace Now that you have installed all the preqrequisite software and joined our GitHub classroom, you can create your workspace and organize yourself for class.\nOur recommendation is that you create a directory called \u0026ldquo;comp426\u0026rdquo; or something similar which you will use to keep all of your work in.\nYou will have a repository for each assignment and so you can use this directory to clone all of your repos into.\nSome of the assignments have their own starter code and some are just blank repos that you will commit your code to and then push back up to GitHub.\nClone the starter code repo There are multiple ways to clone a repo and get yourself up and running.\nBelow we will detail doing this in VSCode and in a Bash shell.\nVSCode  Open Visual Studio Code (You can also do this by clicking on the VSCode button right in your repo page.  You will have to authorize VSCode to use your GH account to install a GitHub Classroom plugin.) 2. Click the Explorer tab on the left. You will see a button that says \u0026ldquo;Clone Repository\u0026rdquo; (hopefully).\n Follow the prompts for authorizing VSCode to use your GH account.\n  You should see a bar at the top that says \u0026ldquo;Provide repository URL or pick a repository source.\u0026rdquo;\n  Go back to your repository page for your repository and click the green button that says \u0026ldquo;Code.\u0026rdquo;\n  Copy the repo link.\n  Paste the link into the repository bar and press enter.\n  It will prompt you for a location to clone the repo into.\n  Once it is cloned, VSCode will ask if you want to open the cloned repository. Open it.\n  You should now see the contents of your repository in VSCode.\n  BASH $ cd Documents $ mkdir comp426 $ cd comp426 $ git clone https://github.com/jdmar3-comp426/`a00-$YOURGITHUBUSERNAME`.git Cloning into 'a00-johnmar3'... remote: Enumerating objects: 12, done. remote: Counting objects: 100% (12/12), done. remote: Compressing objects: 100% (10/10), done. remote: Total 12 (delta 2), reused 2 (delta 0), pack-reused 0 Receiving objects: 100% (12/12), 14.37 KiB | 7.19 MiB/s, done. Resolving deltas: 100% (2/2), done. $ cd `a00-$YOURGITHUBUSERNAME` $ ls Et voila! You are in the directory containing your repository! You should be able to see the base files in the repository after your ls command. Now you can open in it whatever editor you wish.\nCreate a demo project After completing the last section, your computer should be set up for developing websites in COMP 426! Let\u0026rsquo;s run through a quick demo to make sure everything works.\nFor this demo, we\u0026rsquo;re going to pretend we\u0026rsquo;re starting a new web dev project. We\u0026rsquo;ll set up a new project directory using npm and Visual Studio Code. Pay close attention to this process, because you\u0026rsquo;ll want to repeat it every time you start working on a new COMP 426 assignment that does not already have a packages.json file in it. In fact, this process can even be used outside of class in the real world to get set up working on new web-based projects.\nCreate a project directory and initialize with npm The first step for starting a new project is usually to create a new folder that will store your project code. However, for this assignment and for others, you will already have a directory created when you clone your assignment repo. You can see these folders in the left side panel of Visual Studio Code, which shows the file explorer.\nThe file explorer can be toggled open or closed by clicking on the pictured icon.\nIf you were going to be creating a new project folder, you could do it by right clicking in the empty space at the bottom of the explorer and clicking \u0026ldquo;New Folder.\u0026rdquo; However, for this demo we will just use the existing folder \u0026ldquo;a00-$YOURGITHUBUSERNAME\u0026rdquo;.\nNext, right click on the folder \u0026ldquo;a00-$YOURGITHUBUSERNAME\u0026rdquo; and click \u0026ldquo;Open in Terminal.\u0026rdquo; This will open a new terminal window pointing at the a00-$YOURGITHUBUSERNAME folder. This raises an important fact about terminals\u0026mdash;they always point to a specific folder location in your computer. Usually, the terminal prompt will give some indication of which folder it is currently pointing at. For instance, you might see something like this:\n1  your-computer-name:`a00-$YOURGITHUBUSERNAME` yourname$   The important thing here is a00-$YOURGITHUBUSERNAME, which indicates that you are currently in the a00-$YOURGITHUBUSERNAME folder.\nThere is a special terminal command, pwd, which tells you exactly which folder the terminal is currently in. pwd stands for \u0026ldquo;print working directory.\u0026rdquo; Try running pwd in your terminal window now, and verify that it is pointing to the a00-$YOURGITHUBUSERNAME folder.\n1 2  $ pwd /home/YOURUSERNAME/Documents/comp426/`a00-$YOURGITHUBUSERNAME`    Whenever you are working on a particular assignment, it is absolutely crucial that you run any related terminal commands from inside the assignment\u0026rsquo;s folder.\n Once you have confirmed that your terminal is pointing to the a00 folder, run the command npm init. This command tells npm to create a brand new web project in the current folder. As part of the initialization process, it\u0026rsquo;ll ask you a long list of questions about your new web project. It\u0026rsquo;s okay to just press enter through all the prompts.\n1  $ npm init    What does running npm init actually do? It\u0026rsquo;s actually pretty simple: it just creates a new package.json file in the current directory. The package.json file is npm\u0026rsquo;s version of a configuration file for your entire web project. It includes lots of valuable information about your project including the project\u0026rsquo;s name, version, description, and author. It also includes a list of the dependencies that your project relies on, and a list of custom scripts, or actions, that may be a part of your web application. The answers you type to the questions asked during the npm init process are used to add more information to the package.json file that is created for your project.\n At this point, the a00-$YOURGITHUBUSERNAME folder should now have a brand new package.json file with the following contents:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;name\u0026#34;: \u0026#34;a00\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }   Add some HTML Next, let\u0026rsquo;s add some html. Right click on the a00-$YOURGITHUBUSERNAME folder, select \u0026ldquo;New File,\u0026rdquo; and name the new file index.html.\nWrite (do not copy and paste) the following code into the new file and save:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Assignment 0 test!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Looking good!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Go ahead and edit me.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Commit changes You have just added a file. Save it and then look at the tabs on the left. You should see one that has a blue dot with a number: it is the source control tab. This means that you have changes you need to commit.\nYou can review the changes and explore the tree, etc. For now, click the check mark, which will trigger a commit. A bar will appear at the top asking you to write a commit message. Write something meaningful to let your future self know what you did: \u0026ldquo;added index.html\u0026rdquo;.\nTo make a commit in your terminal from inside the a00-$YOURGITHUBUSERNAME directory, run the following:\n$ git add -v . $ git commit -a -m \u0026quot;added index.html\u0026quot; The first command adds any new files that you created. The second command commits the changes and leaves a log message. Make commits anytime you add or edit files after you have tested them to make sure they are working properly. To test them, keep following these instructions.\nInstall Browsersync Next, we\u0026rsquo;re going to use npm to add our first dependency to the new a00 web project. The package we\u0026rsquo;ll add is called Browsersync, and it will help make web development much easier! Browsersync is a \u0026ldquo;dev server,\u0026rdquo; and its job is to show you what your website looks like in real time as you actively make changes to your code. Browsersync works by pretending to be a real web server, running in the background on your computer and monitoring changes to the files in your project directory. Although it\u0026rsquo;s optional, you may wish to install and use Browsersync when working on all assignments for COMP 426.\nTo install Browsersync as a dependency for a00-$YOURGITHUBUSERNAME, run the following command inside the a00-$YOURGITHUBUSERNAME terminal:\n1  $ npm install browser-sync    Remember back in Section 2.2 when we ran npm install to install dependencies for the COMP 426 code? This time we\u0026rsquo;re adding the extra word (called a command line argument) browser-sync to the command. This tells npm to search online for the package named browser-sync, add it as a dependency to our new project a00, and download it. One simple command automatically added a powerful third-party program to your new app\u0026mdash;without even writing a single line of code! We\u0026rsquo;ll be using npm install a lot this semester to add other third-party packages to our code.\n Note: To get credit for a00, you must have Browsersync added as a dependency to your project.\nStart the development server With the simple index.html file in place, its time to see if things actually work. Using the terminal inside the a00-$YOURGITHUBUSERNAME folder, run the following command to start the development server:\n1  $ npx browser-sync start -sw   A browser window should have been automatically opened, showing the HTML page we created in the prior step. If not, open http://localhost:3000/ in Google Chrome. You should see the text inside the \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; and \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; now being rendered on the website.\n Note: The command npx browser-sync start -sw is worth memorizing, especially if you plan to use Browsersync for assignments in COMP 426 (which is highly recommended). Browsersync is actually quite a powerful tool, although we won\u0026rsquo;t get into the more advanced features. If you\u0026rsquo;re interested in learning more, here\u0026rsquo;s a list of the supported command line options. The -sw part of the command tells Browsersync to serve your files locally and actively watch for changes that you may be making to the code. Because we didn\u0026rsquo;t install the browser-sync globally we need to use the npx command to run it locally.\n Edit Some HTML The beauty of using a local web server as you develop is that every time you save your changes, the updated version of the website will be immediately shown in the browser window.\nTo demonstrate this, we\u0026rsquo;re about to make a change to the index.html file created in Section 3.3. The instant you save the changes you make, you should see the webpage automatically reload to reflect the change. This makes development much easier and faster. Get used to this workflow because it is an industry standard and it should make A1 much easier!\nChange line 11 from:\n1  \u0026lt;p\u0026gt;Go ahead and edit me.\u0026lt;/p\u0026gt;   to:\n1  \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Almost done I promise.\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;   Save the changes you made, and watch the webpage instantly reload in the browser!\n If you\u0026rsquo;re on Windows, save by pressing Ctrl + S on your keyboard. If you\u0026rsquo;re on a Mac, save by pressing Cmd + S.  Stop the development server You may have noticed that back in Visual Studio Code, the terminal panel still looks something like this:\nThere\u0026rsquo;s no dollar-sign prompt ($), and the terminal won\u0026rsquo;t let you type text into it. This is because Browsersync is still running and is using up that whole terminal. If you ever needed access to a second terminal while Browsersync was running, you could always start up another one with View -\u0026gt; Terminal.\n Visual Studio Code understands that you may need to use multiple terminals at once, and it provides an easy way to switch between them: the small drop-down to the right of the word \u0026ldquo;TERMINAL\u0026rdquo; in the screenshot above. Clicking that drop-down displays a list of all the active terminals running in Visual Studio Code. You can kill, or delete, a terminal with the trash can icon. This immediately terminates whatever process is running in the terminal and shuts that terminal down. Other terminals in Visual Studio Code will be unaffected by this action.\n Whenever you finish working, you may wish to stop the Browsersync development server. One way to do this is by clicking the trash can icon, thereby killing the whole terminal window. Another way is to click back on the terminal that has Browsersync running (see screenshot above) and press the Ctrl + C keys on your keyboard. This should exit Browsersync and return the terminal back to a dollar-sign prompt ($).\n Pressing the Ctrl + C keys while working in a terminal sends a special interrupt (SIGTSTP or \u0026ldquo;terminal stop\u0026rdquo;) to the process currently running on that terminal. That interrupt forces the process to close.\n Submit the assignment If you\u0026rsquo;ve made it to this point, you\u0026rsquo;ve finished a00. The final step is to push the code you created.\nAll assignments in COMP 426 will be submitted by pushing code back to the repository you cloned.\nPush your code  In VSCode, go to the source control tab that you used before. Make sure that all of the changes are committed. Click the little three dot menu a few items away from the check mark. Select \u0026ldquo;Push\u0026rdquo; from the dropdown menu.  THAT\u0026rsquo;S IT! YOU\u0026rsquo;RE DONE WITH THE FIRST ASSIGNMENT!\nThe autograder will do its thing and you should be able to see if your code meets all the requirements by clicking on the Actions tab in your GH repo after you have pushed. The autograder can take a minute or two, so be patient.\nIf your code doesn\u0026rsquo;t pass one of the tests, try to figure out why it didn\u0026rsquo;t pass, fix the error, commit, and push.\nYou can commit and push changes as many times as you need to pass all the tests. This goes for every assignment, not just this one. You always have the option of pushing new changes to autograded assignment repos.\nA note about HTML validation If you copied and pasted the HTML from the above block into index.html, then it will not parse as valid because there are intentional whitespace errors in the example block that you probably missed. It is good practice to run your HTML through a validator. Get into the habit of doing this and learning how to read the output so that you can deal with errors. Familiarize yourself with the W3C validator: https://validator.w3.org, which you can use to validate the HTML for this assignment.\n","description":"This assignment for COMP 426 will help you get through setting up tools and installing some of the basic software you will need to have for the course. It is a walkthrough for installing and setting up your development environment, including: Node.js, VIsual Studio Code, Chrome, git, and using GitHub Classroom for submissions.","id":0,"section":"assignment","tags":null,"title":"a00 This is all a setup","uri":"https://comp426.johndmart.in/assignment/a00/"},{"content":"git is a distributed version control system that keeps track of the changes between plaintext source files. It can be used for collaboration or for managing and keeping track of workflows for individuals. While primarily intended for software source code, git works with any plaintext files, and so can also be used for authoring of other kinds.\ngit basics git official documentation\nYou should become conversant with the official documentation for git. It has everything you need to know, all in one place.\ngit - The Simple Guide (Download PDF)\nThe guide above is, hands down, the best, most straightfoward guide to get you going or refresh your memory for git commands.\n[An Ultimate Guide to git and GitHub - Suhail Kakar](https://dev.to/suhailkakar/an-ultimate-guide-to- git-and-github-20j)\nGit Cheat Sheet - GitHub\nGit Tutorials and Training - Atlassian\nUsing gitignore You can place a file in the root of your repository directory named .gitignore and add paths which will be specifically excluded by git when you add files and commit changes. This is a good idea to do with Node.js packages in particular, since otherwise you are just moving around a bunch of dependencices that can be automatically downloaded by npm instead.\nHow to add folder to gitignore - Edpresso Team\nA collection of .gitignore templates\nThis is a good resource. You will likely want to add the text from Node.gitignore to your .gitignore file for most assignments.\n","description":"Save your your whole workflow (and your sanity) with git. Never lose edits again.","id":1,"section":"guide","tags":null,"title":"git","uri":"https://comp426.johndmart.in/guide/git/scm/"},{"content":"GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. It also adds a social interaction layer to the process of managing version-controlled source files.\nGitHub Basics Hello World - GitHub Guides\nKeeping GitHub forks up to date with upstream source Keeping your forked repo synced with the upstream source - Nitin Venkatesh\nSyncing a fork - GitHub Help\n","description":"Keep your git repos in the cloud for redundancy and collaboration.","id":2,"section":"guide","tags":null,"title":"GitHub","uri":"https://comp426.johndmart.in/guide/git/hub/"},{"content":"GitHub Actions allows for testing, compiling, and other workflow tasks to be performed on GitHub after you push to a repository housed there. COMP 426 uses these for autograding and other basic evaluation of assignments when you submit them. It is useful to become familiar with how it works so that you can monitor your autograded assignments when you submit them.\nGitHub Actions - GitHub Docs\n","description":"Automate a variety of test and compile workflows server-side on GitHub.","id":3,"section":"guide","tags":null,"title":"GitHub Actions","uri":"https://comp426.johndmart.in/guide/git/hubactions/"},{"content":"GitHub Classroom allows your instructors to distribute starter code for assignments, automatically create and manage repositories for student work, and automatically grade work sumbitted by push to GitHub. This is how all assignments will be managed for COMP426.\nYou can install an extension in VSCode that will let you simplify the process of accepting and submitting assignments.\nInstall GitHub Classroom extension on VSCode\n","description":"Interact with the assignments for COMP 426 in a GitHub Classroom instance.","id":4,"section":"guide","tags":null,"title":"GitHub Classroom","uri":"https://comp426.johndmart.in/guide/git/hubclassroom/"},{"content":"In this assignment, we will create a set of HTML pages that are styled using CSS.\nFollow the GitHub Classroom link for a01 listed on Piazza and Sakai. Clone the repository that it sets up for you. Just like last time, there will only be LICENSE AND README.md files in the repository when you clone it. You will create the rest of the files referenced below.\nThese pages should describe a mythological character or mythological story. The term \u0026ldquo;mythological\u0026rdquo; can be broadly interpreted and can be from any culture, time period, media universe: any mythos is fine. The content doesn\u0026rsquo;t really matter. You are encouraged to use images and video but aren\u0026rsquo;t required to do so. Be sure to link to sources (citation) if you use images or video found on the Internet. Wikimedia Commons is a good place to find images and other media that are licensed for redistribution.\n For ease of development, you are encouraged to use the browser-sync npm plugin from a00. Remember that all of your work (and commands) should be done inside of the a01-$YOURGITHUBUSERNAME folder in your workspace. It seriously makes writing and checking easier. If you do, remember to add a copy of this .gitignore file to your repository. Be sure to rename it .gitignore.\n Making a simple website The major requirements for this assignment are these:\nHTML  There should be a single logical \u0026ldquo;starting\u0026rdquo; or \u0026ldquo;home\u0026rdquo; page named index.html. This is a standard in web development because it allows the server to render it without specifying which file you want to view (why index.html). There should be at least 3 OTHER pages, not including index.html. The others can be named whatever you like. There is no maximum limit of pages, but don\u0026rsquo;t go overboard. You\u0026rsquo;re not getting extra credit for extra pages or anything. index.html should contain a link to all of your other pages. Other pages should at least contain a link back to index.html. You might also develop some sort of set of navigation links so that you can move from one page directly to others. All of the pages should use the same CSS stylesheet, which should exist as a separate file styles.css. All of your html pages should be valid HTML5 (html validator). Minor warnings about browser incompatibility are OK.  CSS This is the part of the assignment where you can get creative. Googling examples of css and best practices is a great place to start.\nEspecially for this assignment w3schools is going to be your best friend. Refer to other resources listed under guides on this site as well (and feel free to add anything that you find useful to those guides).\nAt a minimum, your stylesheet should:\n Have at least 10 selectors Use two or more fonts for different kinds of content Set the background color of some elements, specifying the color by hex notation Set the border of some elements Use the :hover pseudo-class for one or more elements Use at least one class-based selector Use at least one id-based selector Have at least one selector rely on the hierarchical relationship between two elements Use width and/or height to control the geometry of an element Validate as CSS3 using the W3C CSS validation tool (css-validator)  The autograder will check specifically for all of the above numbered parameters in your repositories. Other than these basic features, feel free to use whatever HTML5 elements and CSS3 attributes you would like. Be creative.\nDisclaimer Do not use any CSS preprocessors or libraries (e.g. Bootstrap, Bulma, etc.). You are required to write all of the css yourself. Later assignments will deal with using these libraries.\n","description":"","id":5,"section":"assignment","tags":null,"title":"a01 HTML and CSS","uri":"https://comp426.johndmart.in/assignment/a01/"},{"content":"HTML and CSS The first real assignment is meant to get you comfortable with the basics of HTML and CSS. Whether you know it very well already or if you need a refresher, going through this module and then a01 should put you in a good position to continue through the rest of the assignments.\nKnowing these markup languages is very important for being a good web developer. Both HTML and CSS are straightforward and well-documented.\nWeb langauges and platforms and frameworks change very rapidly and you will, as a web developer, spend a career learning new languages and platforms and frameworks. You will constantly be learning and teaching yourself new things. If you take no other lessons away from this class, take this one: get comfortable looking things up and learning things on your own. It is the only way.\nThe list of resources belows, for example, are the kinds of things that you will want to learn how to find online. Google. Everything.\nHTML describes the web page\u0026rsquo;s structure while CSS describes how that structure should be styled. We are going to provide you a short online course so you can familiarize yourself with these two languages. In the second (after the initial setup) assignment we will be making a simple website using just HTML and CSS. Remember all the assignments are already published so you can look ahead and see what kinds of things you will be expected to do.\nIf you find anything overly confusing, ask on Piazza or reach out during office hours. We will be making it very clear what you will be expected to know for a test when it comes time for that. If you can do the upcoming HTML and CSS assignment a01 without looking things up, then you can consider yourself a genius-level expert. If you can complete a01 while referencing the endless trove of documentation available online, then you are like the rest of us and have a pretty decent working knowledge that is good enough to do web development.\nHTML and CSS is probably the most googleable topic you will ever come across in your CS career. Don\u0026rsquo;t be afraid to look things up, but make sure you aren\u0026rsquo;t just copy-pasting things from Stack Overflow either.\nRecommendations for self Study Code Academy CodeAcademy - Learn HTML and CSS\nYou will have to sign up for an account, but it is totally free. You should complete the following tutorials:\nHTML  Elements and Structure Tables (know the basics) Forms (know the basics there will be an assignment on this later) Semantic HTML (optional and not required, just make yourself familiar with it so you can sound smart if you see it at a job)  CSS  Selectors and Visual Rules The Box Model Display and Positioning Colors (optional) Typography (optional) Grid (Skip this and learn basic Flex) CSS Transitions (optional)  w3schools The w3schools site is an excellent resource for the markup and programming languages that we will be using in this course. Get comfortable working through the tutorials both as self-study resource and as a reference tool.\n w3schools HTML w3schools CSS  Mozilla Developer Network (MDN) The Mozilla Developer Network has excellent guides and documentation on all things related to web development.\n MDN HTML MDN CSS.  TutorialsPoint For those of you who just want to read things I\u0026rsquo;d check out TutorialsPoint\u0026rsquo;s pages on HTML and CSS. I don\u0026rsquo;t think the CSS one is very good and you would be better off with the Code Academy one.\nAssessment There is no graded assessment component for course modules. We will not be giving you graded quizzes or anything. However, it will be effectively impossible to successfully work through any aspect of this course going forward without famililarity manipulating, writing, and editing HTML and CSS.\nHere is a list of online quizzes that you can and should take on your own to test and evaluate your knowledge. It would behoove you to take these quizzes and then review things that you find difficult. Practice.\n GeeksforGeeks w3schools HTML Quiz w3schools CSS Quiz ProProfs HTML Quiz with Answers Khan Academy HTML/CSS Recap TutorialsPoint HTML 5 Online Quiz TutorialsPoint CSS Online Quiz CSS Portal CSS Quiz Quizizz HTML and CSS Quiz 1  ","description":"Knowing how to write, edit, and manipulate HTML and CSS is integral to web development. Here are some pointers for refreshing your HTML and CSS skills.","id":6,"section":"module","tags":null,"title":"mod01 HTML + CSS Crash Course","uri":"https://comp426.johndmart.in/module/mod01/"},{"content":"Directly writing raw, static HTML and CSS is feasible for smaller sites like the mythical one you designed for a01. But it\u0026rsquo;s easy to see how designing a website from scratch can be difficult\u0026mdash;especially for large, complex, dynamic sites containing many pages.\nAnd although every website you have ever used is ultimately expressed in terms of CSS and HTML, modern web developers typically have many tools at their disposal to help organize the code, reduce unnecessary duplication, and promote best practices. In this course, we will continue to become familiar with some of these tools.\nWhat is a framework? Frameworks are widely employed for assisting with web development. A framework is a structural code library that enforces an organizational scheme on the code that you write, with the goal of helping you to produce better software. Here are a few of the benefits of using a framework to organize your application:\n It speeds up the development process It makes your code easier to read It reduces the potential for bugs It prevents code replication It encourages you to conform to best practices It provides pre-written solutions to common tasks that you are likely to encounter   A framework is typically written for a particular language and is designed to help you write a particular type of software. For example, Angular, React, and Vue are examples of JavaScript frameworks designed to help you write organized JavaScript code for the browser. We\u0026rsquo;ll learn more about these frameworks later the semester.\n CSS frameworks for web development CSS is what we use to make the web and web-based applications look and act for the people using them. CSS frameworks jumpstart the process of developing the user interface layer of our applications.\nIn this assignment we will be exploring Bulma, an open source CSS framework designed to help you organize the way you add style to HTML pages. By linking Bulma to your HTML pages and adding a few special classes to your HTML elements, you can quickly make a webpage that looks good and follows best design practices, all without having to write any custom CSS.\n While Bulma is a great CSS framework, it\u0026rsquo;s not the only one out there. These blog posts list other CSS frameworks that are also popular right now. You are likely aware of other frameworks, such as: Bootstrap, Materialize, Foundation, and Tailwind, among others. When planning a new web app, picking a CSS framework can be difficult, and there are a lot of factors to consider. Ultimately, try to choose a framework that will allow you to rapidly produce well-designed pages.\n CSS frameworks are a quick and easy way to make pretty and functional websites, but they\u0026rsquo;re no substitute for understanding the underlying CSS rules that are being applied. For this course, it\u0026rsquo;s important to have a working understanding of the fundamentals before diving fully into using framework. This assignment is intended to get you to a place where you understand what a framework (in this case a CSS framework) does and how to integrate it into your work.\nGetting started   To get started, follow the GitHub Classroom invite link for a02, which will be listed on Sakai and Piazza.\n  As with previous assignments, clone the repository that is created for you to your local environment. It contains some starter code.\n  Some starter code has been provided for you. You should see some HTML, some custom CSS (do not edit this file at all), a list of the Bulma classes you will need to use (also listed in a table below), a directory of some images, a license, and a README file.\n  Next, open a terminal in the a02 assignment directory and initialize a new npm project for a02 using the npm init command (see a00 if you need a refresher).\n  When you initialize the npm project, fill in the fields that it prompts you to fill with information relevant to you (e.g., your name, etc). MOST IMPORTANTLY: update the license to match the license in the LICENSE file, when it prompts you to do so. Look in the LICENSE and figure out what license is in there. [HINT: GitHub will tell you which licence you are using if you open the LICENSE file in GitHub.] You can then use the SPDX License List to get the correct identifier that matches. If you do not do this during the init process, don\u0026rsquo;t worry! You can always edit the packages.json file after it has been created.\n  It would behoove you to add a .gitignore file to your repository so that your repo doesn\u0026rsquo;t track all the dependencies you install. This one is very good.\n  While you have the terminal open, also add Browsersync as a dependency to your new project (using the command npm install browser-sync). It will make your life easier.\n  This is a good time to use git add and git commit so that you can ensure that the new files you just created are being tracked.\n  Start Browsersync from your terminal (browser-sync start -sw) and see how the HTML files look when rendered in the browser. Since we only have the custom starter CSS, they should look pretty plain.\n  Installing Bulma In this assignment, we are going to add Bulma styles to the raw HTML provided in the assignment directory. The goal is to use Bulma to improve the way this page looks, all without writing a single line of CSS.\nSince Bulma is a CSS framework, it is essentially one giant pre-written CSS stylesheet. In order to start styling our pages with Bulma, we need to first link the HTML to the Bulma CSS. Recall from a01 that CSS stylesheets can be linked to HTML documents by adding a special \u0026lt;link\u0026gt; tag inside the \u0026lt;head\u0026gt; of the document.\nHowever, this raises an important question: where should we store the giant Bulma CSS stylesheet, and what path do we put in the \u0026lt;link href=\u0026quot;\u0026quot;\u0026gt; attribute in order to link to it?\nGenerally speaking, there are three feasible possibilities:\n  Download the Bulma CSS file manually, save it in the a02-$YOURGITHUBUSERNAME directory, and \u0026lt;link\u0026gt; to it with a relative path.\n  In the HTML file, \u0026lt;link\u0026gt; directly to an online version of the Bulma CSS file hosted by a Content Delivery Network (CDN).\n  Download the Bulma CSS file as a dependency using npm, and \u0026lt;link\u0026gt; to the downloaded file relatively from node_modules.\n   A Content Delivery Network, or CDN, is a giant network of servers geographically spread across a large region\u0026mdash;like the country, the continent, or the world. The servers in a CDN work together to deliver website data such as video, images, audio, html, etc. to users as fast and as reliably as possible. By spreading out the servers across the world, there is a greater chance that any given user will be geographically close to a CDN server. If the closest server in the network responds to a user\u0026rsquo;s request, it\u0026rsquo;s likely that the response will arrive even faster.\n These three options are discussed in more detail on the official getting started with Bulma page. Using npm to install the package as a dependency is the recommended option, so that\u0026rsquo;s what we will do for this assignment. In general, installing packages through npm is the best route when you need to add third party code to your web apps for this course.\nAdd Bulma as a dependency Therefore, to download Bulma as a dependency, run the following command from the terminal in your a02-$YOURGITHUBUSERNAME directory:\n1  $ npm install bulma    Note: You may still have Browsersync running in your terminal. Thus, to run npm install bulma, you either need to open a new terminal from the a02-$YOURGITHUBUSERNAME directory (right click your a02-$YOURGITHUBUSERNAME directory and select \u0026ldquo;Open in Terminal\u0026rdquo;), or you need to kill the Browsersync process with Ctrl + C to free up the existing terminal instance.\n Finding the Bulma stylesheet Now that Bulma has been downloaded, the next step is to connect the CSS to the HTML by adding \u0026lt;link\u0026gt; tags in the \u0026lt;head\u0026gt; of the HTML documents. But what URL should we use as the href attribute of the \u0026lt;link\u0026gt; tag? We need to look at the files that were downloaded by npm and find the correct CSS file.\nEvery time you npm install a new dependency, npm automatically downloads the requested files from the internet and puts them in a special directory named node_modules. This process occurred when you ran npm install bulma, meaning the Bulma files are now ready and waiting in the node_modules directory in your a02-$YOURGITHUBUSERNAME directory. Open node_modules now and confirm that bulma has been downloaded. When you expand the directorys, it should look something like this:\nInside of the new a02-$YOURGITHUBUSERNAME/node_modules/bulma directory is a list of files and directories that collectively make up Bulma. In particular, you\u0026rsquo;ll notice a sub-directory named css, which contains three files:\n node_modules/css/bulma.css node_modules/css/bulma.css.map node_modules/css/bulma.min.css  The two files that end in .css are exactly what we\u0026rsquo;re looking for! In fact, both bulma.css and bulma.min.css represent complete copies of the Bulma CSS source code, and either one would work for this assignment.\nWhat is the difference between the two files? bulma.min.css is a minified version of Bulma, which means the CSS code was purposefully compressed to take up as few characters as possible. All newlines and whitespace are gone from the code, meaning it has a smaller file size and is therefore faster to transfer across the internet. Your browser doesn\u0026rsquo;t need the extra whitespace, and is perfectly happy reading and understanding the minified version. However, minified code is generally much harder for humans to read!\nLinking to Bulma in HTML Now that we found the location of the Bulma CSS stylesheet, we can link it to the HTML file. The file we want is located at node_modules/bulma/css/bulma.css relative to the a02-$YOURGITHUBUSERNAME root directory.\nAdd the following line inside the \u0026lt;head\u0026gt; of the HTML document in a02:\n1  \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;node_modules/bulma/css/bulma.css\u0026#34;\u0026gt;   Make sure to place it above \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;custom_style.css\u0026quot;\u0026gt; but DO NOT remove this line. You need both.\nTHIS ONE LINE will be the only line you add to index.html. You should not add any other lines to this file.\nRevisit rendered pages Just by linking to Bulma, the provided HTML page already look much better! Go ahead and take a look. If Browsersync is not running, start it up again and head to http://localhost:3000 on Google Chrome to see the rendered version.\nBulma automatically adds default styles to your page that affect little things like the default font family, font colors, font sizes, heading sizes, paragraph spacing, etc. Though subtle, these changes are important! They were carefully chosen by the Bulma team to reflect recommended best practice for web design.\n If you\u0026rsquo;re interested in learning more about best practices for good web style and design, there are lots of online resources available in the guides pages). In particular, typography is the art of formatting text to be practical, effective, readable, and stylish.\n Adding Bulma classes The default styles added to your page by linking to Bulma are just the beginning. The real power of Bulma comes with its CSS classes. Bulma defines and styles hundreds of little utility CSS classes for use in your HTML.\nNeed to change the background color of a \u0026lt;div\u0026gt; and make it yellow? Bulma pre-defines a CSS class for that.\nNeed to add a red glow to a form input field when the user types an invalid value? There\u0026rsquo;s a class for it.\nWhat about laying content side-by-side? Or making a table pretty? Or increasing the size of the text in a particular area? Or changing the font-family? Or giving buttons different colors? Bulma has classes for all of these too.\nBulma offers too many CSS classes to cover in one assignment or project. However, you should become familiar with the official Bulma documentation, which is an excellent resource for getting to know your way around the framework and even gives code examples demonstrating what each CSS class does.\nGo to the Bulma documentation and click through the menu on the right side of the page (see screenshot below). For the next part of the assignment, you will use Bulma classes to improve the design of the provided a02 HTML document.\nSubmission requirements For this assignment, your task is to correctly add Bulma classes to the a02-$YOURGITHUBUSERNAME/index.html HTML document to make it look exactly like the screenshots linked below.\nNOTE:\n You may not change the HTML elements on the page at all, except for adding Bulma classes. You also may not add any custom CSS styles or edit custom_styles.css.  You are required to reproduce the style from the screenshots exactly. To make this easier, we have included a table below containing all the classes you\u0026rsquo;ll need to use. You\u0026rsquo;ll also notice that as a hint, some of the elements in the HTML file already have their classes defined; there is no need to add or remove classes from these elements.\n Some IDEs provide automatic autocomplete when you start typing Bulma classes. This functionality is built in to Webstorm, but if you want Bulma class autocompletion on Visual Studio Code, you\u0026rsquo;ll have to add it as an extension.\n Per usual, make sure to frequently commit your code changes in case you need to roll them back.\nWebsite Screenshots Here are screenshots of the website that you are trying to create. To get full credit on this assignment, your website must automatically match all these images by correctly using only the Bulma classes listed in the next section.\n 4k 1080p narrow mobile  Classes to Use Notice how the table below isn\u0026rsquo;t just a list of classes used, but a list of classes to be used to style individual html elements. There is no mixing and matching necessary among the rows of the table.\nFor example, when you see subtitle has-text-grey has-text-weight-light you can assume that this is styling a single html element. In this case it styles the subtitle on line 77. You won\u0026rsquo;t see combinations other than the ones listed in the table below.\n   Class List Documentation Section     button is-dark Buttons   checkbox Forms   column Columns/Layout   columns    columns is-multiline justify-center    container Layout   content Elements -\u0026gt; Content   content has-text-centered    content has-text-right    control Form   field Form   has-text-weight-bold Modifiers -\u0026gt; Typography   hero is-dark is-fullheight Layout -\u0026gt; Hero   hero-body    input Form   is-active    is-capitalized    label    notification is-danger Elements -\u0026gt; Notification   section Layout -\u0026gt; Section   section has-background-white    select    subtitle    subtitle has-text-grey    subtitle has-text-grey has-text-weight-bold    subtitle has-text-grey has-text-weight-light    subtitle has-text-grey has-text-weight-normal    subtitle has-text-grey is-italic    tabs is-medium is-centered    title    title has-text-info is-family-secondary    title has-text-weight-bold    title has-text-weight-light    title has-text-weight-normal     Wrap-up This assignment is more involved and more difficult than the previous two. We are actually getting into connecting visual elments with the code that makes them.\nWe are also getting deeper into troubleshooting and figuring out what is happening in your code.\nNothing is impossible. Take your time. Look around in the HTML before you just start editing.\nRemember the above directive that you should only add one line to index.html. That is not a recommendation. If you add other lines to the file, the tests will fail. If you edit custom_styles.css, the tests will fail.\nThe assignment will be evaulated entirely on whether you are able to apply the classes to elements within index.html. And guess what: you are capable of doing this.\nAnd we\u0026rsquo;re here to help if needed. Post your questions on Piazza and we\u0026rsquo;ll help you work through issues.\n","description":"In this assignment, you will incorporate a CSS framework into some HTML to create a web interface without having to write all of the CSS from scratch.","id":7,"section":"assignment","tags":null,"title":"a02 CSS Frameworks","uri":"https://comp426.johndmart.in/assignment/a02/"},{"content":"While writing HTML and CSS is necessary for making websites, the technolgy that does a lot of the behind-the-curtain work is JavaScript. It is the backbone of every modern web framework and is a necessity for makng interactive web pages.\nThis assignment, however, wont be using a web browser at all. When we want to execute JavaScript outside of the browser environment we use Node.js. This makes writing JavaScript like writing any other programming language.\nThe purpose of this assignment is to get you comfortable and familiar with writing functions in JavaScript. For a basic example that we will walk through together live, see mod03.\nSetup Find the assignment link on Sakai or Piazza. After you\u0026rsquo;ve accepted the assignment from the link and cloned the repo: run the npm install command with no other arguments.\nYou do not need to run npm init because the repo already has a package.json file and a list of packages that will install.\nWhy can\u0026rsquo;t we just run the files normally? JavaScript that runs in the browser follows a slightly different standard than JavaScript on your computer. This has been a point of conflict in the past, but now most things are shifting towards the browser standard.\nOne of the main differences is how importing and exporting is handled.\n es6 modules and the import and export keywords are the standard. The specification is written by the ECMA TC39 (technical committee in charge of the language standards).\nHowever, it\u0026rsquo;s (in relative terms) recent and since JavaScript didn\u0026rsquo;t support modules prior to it, workarounds were developed. These include CommonJS (NodeJS modules) and AMD (RequireJS modules).\nOn Node, CommonJS is going strong and there\u0026rsquo;s a bit of a conflict regarding the \u0026ldquo;migration\u0026rdquo; to the standard, so there you likely don\u0026rsquo;t get to choose.\nHowever, if you use JavaScript modules on browsers, you probably have a build step that bundles up your modules with something like Webpack or Browserify (at least until module loading is handled across the all relevant browsers). There you should definitely go for the standard es6 modules and it\u0026rsquo;s considered best practice.\nreddit post about this topic\n Because of this difference and the fact that this is a web development course, we are going to be using es6 import export syntax. To use es6 style import and exports we require the use of the esm package. Here is a stackoverflow post about the topic. Feel free to google around.\nHow to run your code! All of the starting files where you will place your code have been provided for you inside the a03-$YOURGITHUBUSERNAME directory. If you wish to separate your code into separate files or make helper functions feel free to do so but it should not be necessary for this assignment.\nYou can open a terminal and run node and your script.\n Normally when you want to run a .js file you just use the command line and call node FileName.js. But because the es6 import and export syntax is experimental in node, we need to use a package called ESM. For us, the user, the only difference is that we now run our node command as follows: node -r esm FileName.js. ESM will not be required in later versions of node.\n Import / Export Example  Import Documentation Export Documentation  Have a look at mod03 if you haven\u0026rsquo;t already. It covers a very basic example for exporting and importing JavaScript functions.\nIn that example, we wrote the following scripts (or similar).\nhelloworld.js\n1 2 3  export function helloWorld(message) { console.log(\u0026#39;Hello World,\u0026#39;, message); }   main.js\n1 2 3  import {helloWorld} from \u0026#34;./helloworld\u0026#34;; helloWorld(\u0026#39;and exit.\u0026#39;);   When we run the main.js script, we should see the output below.\n1 2  $ node -r esm main.js Hello World, and exit.   Time to Code Here are the MDN section on:\n functions, arrays, and objects.  Reading this isn\u0026rsquo;t required but will give you the tools and knowledge to complete the assignment. The later section on advanced functions will have problems that are already solved by the language, so knowing what JavaScript can do is very helpful.\nYou may also want to look at the w3c schools JavaScript tutorial, which has similarly helpful and useful examples that you can work through.\nBelow are two ways to write functions that output \u0026lsquo;Basic Functions\u0026rsquo; as a string when called. Note the export keyword is used here so they can be imported into a different file. This is how the autograder will check your work.\n1 2 3 4 5 6 7 8 9 10 11 12 13  // Defined with the function keyword export function hello1() { return \u0026#34;Basic Functions\u0026#34;; } // Defined with an arrow function export const hello2 = () =\u0026gt; { return \u0026#34;Basic Functions\u0026#34;; }; // Calling both functions hello1(); hello2();   The following files need to have their function definitions filled out:\n mild_1.js mild_2.js medium_1.js medium_2.js medium_3.js spicy_9.js  If you find yourself writing a lot of code on medium_*.js:\n https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map  NB: This assignment is very involved and will likely take longer than any of the others so far. Do not worry. You\u0026rsquo;ll get through it. Just work through the function definitions one-by-one, use the available references, and come to Piazza with questions if you need to.\n","description":"","id":8,"section":"assignment","tags":null,"title":"a03 JS Functions","uri":"https://comp426.johndmart.in/assignment/a03/"},{"content":"In a03, we\u0026rsquo;re writing some basic JS functions that can be called to return values outside of a web browser. This module includes some information and links about JS functions and a walkthrough of creating a very basic set. Some of this is covered in the a03 instructions as well. You can use this as a reference to expand on the information presented in the instructions.\nHow do functions work in JavaScript? Functions in JS work prettymuch the way that functions in any langauge work. You are defining something that can be invoked to do a specific set of tasks so that you do not have to write instructions for those tasks over and over again.\n One weird trick: if you find yourself doing something more than once, then you should probably rwrite a function instead of doing that thing over and over again.\n Functions have a very straightforward definition syntax comprising a few parts:\n name, which invokes the function; parameters, which define local variables as arguments when the function is invoked; and code that gets executed by the function.  If we want to get some sort of information out of our function, then we will need our code to include a return, which is all the stuff that you expect the function to spit out so you can do something else with it.\nBasic function definition syntax looks like this:\n1 2 3 4  function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   As you can see, you can use // to comment single lines in your code inside a function. You can also comment multiple lines by using */ and /* to wrap whatever you want to comment between them. These work across the board in JS and you should be using them in order to leave information for your self. There are tons of examples of comments in a03.\nExport / Import In addition to writing basic functions, we want to be able to olexport them so that we can call them in other places. This requires just a simple modification to the basic syntax listed above:\n1 2 3 4  export function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   Lets\u0026rsquo;s say we have the above code saved in a file called exports.js.\nTo import the same function, you would need the following in another file, we\u0026rsquo;ll call it main.js. We\u0026rsquo;ll also add an invocation of the function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; name(5,6);   In order to get the above to spit out the return value in the terminal, we need to wrap the call in the above block of code with a console.log() function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; console.log(name(5,6));   That should spit out 11 if we were to run main.js in a terminal with node.\nHello, world. In this section, we will do a pretty basic walkthrough for creating, exporting, and importing a \u0026ldquo;Hello, world\u0026rdquo; function. This example will sort of mirror what you are doing in a03.\nGet set up First, open a terminal and create a new directory.\n$ mkdir helloworld Then, let\u0026rsquo;s create some files to get ourselves started.\n$ cd helloworld $ touch helloworld.js $ touch functions.js Then lets initialize our directory as an npm package. You can just accept the defaults suggested by npm.\n$ *npm* init In order to run this, we\u0026rsquo;ll need some help from the ESM package, so let\u0026rsquo;s go ahead and install that now.\n$ *npm* install esm  Normally when you want to run a .js file you just use the command line and call node FileName.js. But because the es6 import and export syntax is experimental in node, we need to use a package called ESM. For us, the user, the only difference is that we now run our node command as follows: node -r esm FileName.js. ESM will not be required in later versions of node.\n Write some code! Now we can open helloworld.js and we\u0026rsquo;ll put the following code in it.\n1 2 3  export function helloWorld(message) { return `Hello, world ${message}` }   Save that script and let\u0026rsquo;s think about what we just did for a minute.\nIn the above script we are defining a function helloWorld() and exporting it so that we can import it and then invoke it elsewhere. It has one parameter, which we have defined as message. Whatever value we insert as the message is going to get returned after the words \u0026ldquo;Hello, world\u0026rdquo;. If you leave the function empty, it will just return \u0026ldquo;Hello, world.\u0026rdquo;\nSo if we want to say \u0026ldquo;Hello, world and exit\u0026rdquo;, then we would call `helloWorld(\u0026lsquo;and exit\u0026rsquo;). There are other ways to do this. The code you see above is one example of how to do this. You may find other examples that work and that is fine.\nNow we need to import our function and call it.\nOpen the main.js file that we created earlier. Put the following in it.\n1 2 3  import {helloWorld} from \u0026#34;./helloworld\u0026#34;; console.log(helloWorld(\u0026#39;and exit\u0026#39;));   Now, what are we doing here?\nWe are importing our previously defined and exported function helloWorld from the helloworld.js script we created earlier. We are using a path relative to our current working directory: ./ means \u0026ldquo;this directory.\u0026rdquo; Since helloworld.js is stored in the same directory, ./helloworld.js means \u0026ldquo;the hello_world.js script stored in this directory.\u0026rdquo; You\u0026rsquo;ll notice that you don\u0026rsquo;t have to put the file extension in the script. Node will assume that we are asking for a JS file.\nNext, we are invoking our function helloWorld(). If we just invoke that on its own, it will not output anything in the terminal. To get it to do that, we need to wrap the function call in console.log().\nSave that file and we\u0026rsquo;ll see if it works!\nRun it! Alright, we\u0026rsquo;ve written some scripts and we have our directory set up with npm. We should be ready to run this and see if it works.\nTo run your script, run the first line in the example below and you should see the output on the second line:\n$ node -r esm main.js Hello world, and exit. You can also have Node run this interactively so that you can change what the function is saying.\nRun:\nnode -i -r esm \u0026gt; The \u0026gt; means that we are in an interactive node session and it is expecting us to type something. So lets type some stuff. Let\u0026rsquo;s import our function (HINT: we do the same thing that we did in the file, but just live on the command line).\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; Don\u0026rsquo;t worry about the \u0026ldquo;undefined\u0026rdquo; thing. It\u0026rsquo;s misleading. It is saying that here was no console output defined, so it echoes \u0026ldquo;undefined.\u0026rdquo;\nWe can turn this off, but for now we\u0026rsquo;re not going to worry about it.\nNext let\u0026rsquo;s see what happens if we continue with our interactive Node session and call our helloWorld() function with different arguments.\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; helloWorld() 'Hello, world undefined' \u0026gt; helloWorld('') 'Hello, world ' \u0026gt; helloWorld('.') 'Hello, world .' \u0026gt; helloWorld('and exit.') 'Hello, world and exit.' \u0026gt; Press CTRL+C twice or type .exit to exit the Node interactive session.\nAnd that\u0026rsquo;s it! We did it! We defined a function, exported it, imported it, and made it do things!\nnpm test If you open up package.json you will notice that there is a field for a test.\nWe left this undefined earlier, but let\u0026rsquo;s define it so that we have another way of running a test of our function.\nLet\u0026rsquo;s put the command that we used to run our main.js file in that field as a test.\nTo do this, make your package.js file look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;name\u0026#34;: \u0026#34;helloworld\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;node -r esm main.js\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;esm\u0026#34;: \u0026#34;^3.2.25\u0026#34; } }   Now, we can run the following in the terminal and it will run the command we set as a test and should generate output that looks like the example below.\n$ npm test \u0026gt; helloworld@1.0.0 test \u0026gt; node -r esm main.js Hello, world and exit. This all feeds directly into a03, which will have you defining a bunch of functions that do different things.\n","description":"Get started writing and calling basic functions in JavaScript.","id":9,"section":"module","tags":null,"title":"mod03 JavaScript Functions","uri":"https://comp426.johndmart.in/module/mod03/"},{"content":"In this assignment, we will build, from scratch, an API that talks to a database of users. Eventually, we will use this method (and this exact database) to add authentication to a page that you previously createed in a01. This is all a lot easier than it seems at first.\nThere are a few basic concepts germane to this assignment that you will want to familiarize yourself with:\n REST (REpresentational State Transfer) CRUD (Create / Read / Update / Delete) SQL (Structured Query Language)  These concepts are explained in some detail in mod04, so you\u0026rsquo;ll want to have a look at that while we are working.\nWe are also going to use Express.js, which is a very simple webserver, to get us going without too much setup.\nYou\u0026rsquo;re starting with a package.json file that has no dependencies installed. We will install them here.\nGet started First things first, let\u0026rsquo;s install the dependencies we need to get going. We\u0026rsquo;ll start by installing Express.js, which we will use as a web server for our API.\nnpm install express Then we need to install the md5 package. This is a package that allows for the hashing of strings using the MD5 algorithm. We will use it for passwords.\nnpm install md5 Finally, we need a database. We are going to use a JS implementation of a sqlite3 database. For this, we need to install better-sqlite, which is a less vulnerable implementation of sqlite3 in JS than some of the other similar Node packages available.\nnpm install better-sqlite3 Now that our dependencies are installed, we should look at our file structure.\nYou will have only two main files for this assignment, server.js which contains the bulk of our code to createe the API and database.js which deals with the database. Skeletons of these files have been createed for you. You will fill in the function definitions based on the instructions below.\n You will notice that the examples below are using a slightly different method for defining functions. This is intentional, because I want you to be able to recognize both. What you will see here is an example of ES6 \u0026ldquo;arrow\u0026rdquo; functions. There are pros and cons to using this method, which we will discuss. The major things to be aware of is that they are:\n not self-referencing, which means that they cannot be invoked from within themselves; and they are not named. They are anonymous, which means that they can be a little harder to debug. They are much simpler, syntactically.   Set up a server Let\u0026rsquo;s look in our files.\nYour server.js file needs some additions to get you started. Open it up and find the lines near the top where we have some variable definitions. It should look like this:\n1 2 3 4 5 6 7 8 9  // Define app using express var express = require(\u0026#34;express\u0026#34;) var app = express() // Require database SCRIPT file  // Require md5 MODULE  // Require a middleware extension for express var bodyParser = require(\u0026#34;body-parser\u0026#34;);   Here we have a few definitions and we need to add two more in order to make this script work with our other database.js script. Define, where the comments indicate, the following:\n a var called db to require the database.js script, and a var called md5 to require md5 module.  There are already other modules being called by require so you can use those as examples to infer how to do the above. Since you\u0026rsquo;re requiring database.js as a file, you need to use a relative path, unlike with other node modules (e.g. \u0026quot;./database.js\u0026quot;).\nThen find a comment that refers to a server port and define HTTP_PORT as 5000.\nOnce you have done that, server.js will allow you to run the server and check that it works. start is defined as a script in package.json to allow us to easily run our server.\nThis is what you should see if you run npm run start:\n$ npm run start \u0026gt; a04@1.0.0 start \u0026gt; node server.js Server running on port 5000 You should also be able to go http://localhost:5000 and see a message from the server. Find where this message is defined in server.js and change it to display \u0026ldquo;Your API is working!\u0026rdquo; when you go to the above address.\nThis means that your API is up and running! It doesn\u0026rsquo;t have any endpoints other than the root endpoint and a catchall that will return a 404 error, but that is enough for now. We will come back to this again after we look at what our database does.\nSet up a database We are using the better-sqlite3 module to both set up our database and also define the way that our new API will interact with the database. Keep the documentation for better-sqlite3 handy. It will be useful to you and necessary.\nYour starter code has a database set up already for you. When you run server.js after making the edits above, it will load database.js and check to see if there is a database named users.db. If there is not, then it will createe one and populate it with two users. You should be able to identify in the code provided where this is happening.\nLet\u0026rsquo;s start with those users and see what else we can do with the database.\nDatabase interactions In this assignment, we\u0026rsquo;re using SQLite3, which is a standalone instantiation of a SQL database. If we used something like MySQL, then we would need to set up a database server, etc. This allows us to work with a database without having to build a bunch of infrastructure for ourselves.\nFor this reason, SQLite3 is a good tool for learning and teaching. You will likely not use it in practice, however, and instead use an actual MySQL or other database server. For the purposes of this and other assignments requiring the use of a database, use SQLite3.\nMost SQL features are available in SQLite3, with some minor differences. Look at the official SQLite site for a rundown of how SQLite understands SQL.\nThere are one million resources available online for looking up and understanding SQL statements. Here is a good SQL cheat sheet from SQL Tutorial. Start there and Google away for others.\nWe need to look at a few things in our database before we return to our API. Let\u0026rsquo;s start with those users already in our database and see what else we can do with the database.\nSQL statements The function of our API will be to Create, Read, Update, and Delete (CRUD) records in our database. To do this, we need to define some SQL statements that do the following:\n Create a new user with password in the database; Read all user information in the database (this one is already defined for you); Read a single user\u0026rsquo;s information in the database; Update a single user\u0026rsquo;s information in the database; and Delete a single user from the database.  We will first hammer out what these statements need to look like for the above specific cases. Then we will wrap them in functions from better-sqlite so we can use them to define our API endpoints later.\nRead some records with SELECT Start with the second member of the list above. We need to get all the records in our database. To get records out of a SQL database, we use SELECT.\nSQL syntax should be pretty parseable. That is, if you just read a SQL statement out loud to yourself, it should make some sense to you.\nTry it with this:\n1  SELECT * FROM userinfo   What is happening here?\nWe are selecting ALL (\u0026quot;*\u0026quot; means ALL) records from a table called \u0026ldquo;userinfo\u0026rdquo;. This should return every record held in the table createed by database.js.\nWhere do we put this, though?\nIf you look in server.js, you should be able to find the above statement wrapped by better-sqlite functions as part of the definition for API endpoint.\n1 2 3 4 5  // READ a list of users (HTTP method GET) at endpoint /app/users/ app.get(\u0026#34;/app/users\u0026#34;, (req, res) =\u0026gt; { const stmt = db.prepare(\u0026#34;SELECT * FROM userinfo\u0026#34;).all(); res.status(200).json(stmt); });   Let\u0026rsquo;s break this apart by looking at lines 3-4. prepare() is what we use to set up the SQL statement. all() returns every record responsive to the query in the statement, which in this case should be every record. Here all() is appended to prepare(), but you could also write this database call as follows:\n1 2  const stmt = db.prepare(\u0026#34;SELECT * FROM userinfo\u0026#34;); const all = stmt.all();   We will look at what the rest of the function is doing in the next section.\nFor now, we want to do something similar this with our 4 other SQL statement prompts.\n1  SELECT * FROM userinfo WHERE id = 2   This is effectively the same statement, but with a conditional that looks for a specific id.\nLook at the better-sqlite statements class under all() and get() to find the relevant functions for the purposes of wrapping these two statements. get() does something similar to all() but instead of returning every row, it returns one row.\nCreate a new record with INSERT Here is a SQL statement that createes a new record with a username and password.\n1  INSERT INTO userinfo (user, pass) VALUES (?, ?)   For INSERT, UPDATE, and DELETE statements, look at the better-sqlite statements class under run(). Pay special attention to the the info object that run() returns. It is useful for generating messages in your API.\nUpdate a record with UPDATE Here is a SQL statement that can update an existing record matching a specific id with either a new username, new password, or both. The COALESCE verb allows a value to be updated if a new one is introduced and remain the same if there is no new value.\n1  UPDATE userinfo SET user = COALESCE(?,user), pass = COALESCE(?,pass) WHERE id = ?   Delete a record with DELETE Here is a SQL statement that deletes a record matching a specific id.\n1  DELETE FROM userinfo WHERE id = ?   Translating between languages The following table translates verbs from our CRUD conceptualization to SQL statements and HTTP method.\n   CRUD SQL HTTP What does it do?     Create INSERT POST Makes a new record.   Read SELECT GET Retrieves an existing record.   Update (replace) REPLACE PUT Searches for a record and overwrites it. If it doesn\u0026rsquo;t exist, the record is createed.   Update (modify) UPDATE PATCH Modifies the information in an existing record.   Delete DELETE DELETE Removes an existing record.    Some of the verbs are identical. Others, not so much.\nThis will be useful as we create endpoints.\nAPI endpoints For this assignment, you need to define 5 endpoints for your API (one has already been defined for you to return all records). Below are descriptions of each endpoint and a test to check if they are working.\nI have set the assignment up using Express.js, which simplifies the createion of endpoints and various other tasks by providing a library of functions tailored to these tasks. There are other similar libraries and frameworks. This is one way of doing what we are aiming at doing.\nRefer to the Express documentation as you work through createing the endpoints.\nResponse Each endpoint should perform the intended function and then return a status code and a message as a JSON object. That will look something like this using Express:\n1  res.status(200).json({\u0026#34;message\u0026#34;:\u0026#34;OK (200)\u0026#34;})   The first part of the above snippet, res.status(), is a status code response. These will not all be the same. Refer to this status code documentation to identify the appropriate status code. There is a also list of all available status codes.\nThe second part of the above snippet could be written as a standalone: res.json() as well. As written, it outputs a JSON message that can then be used by a client interface.\nRequest The requests for the API endpoints will have variables in Express. Some of these are included in the URL that represents the endpoint itself and others can be passed either as JSON or as a query appended to the URL.\nVariables that you include as part of the path in the endpoint become parameters. So, if you are using id in the endpoint path, then you use req.params.id.\nFor example: the id part of /app/user/:id will be represented as req.params.id.\nVariables that you include as part of a URL-encoded query are part of the body content that gets handled by a piece of middleware called a body parser. If you are using user and pass in a query string, then you use req.body.user and req.body.pass, respectively.\nFor example: if you have a URL like /app/update/user/:id/?user=test\u0026amp;pass=supersecurepassword then user will be represented as req.body.user.\nPasswords We\u0026rsquo;re not doing really anything with security in this assignment, but it is a good idea to think about what you are passing as cleartext. Passwords, as a rule, are never going to be stored in cleartext.\nFor our purposes, we\u0026rsquo;re going to use md5() to wrap password so that we will have this: md5(req.body.pass). For the example password above, instead of \u0026ldquo;supersecurepassword\u0026rdquo; in the database, this will put something like \u0026ldquo;20f98f38b3bbd2da93d75fd25806c048.\u0026rdquo;\nExpress endpoints Express has functions that correspond to the HTTP methods listed in the table above.\nThe table below has a list of the endpoints you will need to define and the Express functions to use.\n| Endpoint | Express function | What should it do? | | /app/new/user | app.post() | Create a new record in the database with a username and password. | | /app/users | app.get() | Retrieve all existing records. | | /app/user/:id | app.get() | Retrieve an existing record with the specified ID. | | /app/update/user/:id | app.patch() | Update the username and/or password for an existing record with the specified ID. | | /app/delete/user/:id | app.delete() | Delete an existing record with the specified ID. |\nEndpoint tests These are the tests that we will run against your API to autograde a04. Below each command is the expected STDOUT\n``sage\u0026quot;:\u0026ldquo;1 record deleted: ID 2 (200)\u0026quot;} $ curl -X GET http://localhost:5000/app/ {\u0026ldquo;message\u0026rdquo;:\u0026ldquo;Your API works! (200)\u0026quot;} $ curl -X GET http://localhost:5000/app/users/ [{\u0026ldquo;id\u0026rdquo;:1,\u0026ldquo;user\u0026rdquo;:\u0026ldquo;admin\u0026rdquo;,\u0026ldquo;pass\u0026rdquo;:\u0026ldquo;bdc87b9c894da5168059e00ebffb9077\u0026rdquo;},{\u0026ldquo;id\u0026rdquo;:3,\u0026ldquo;user\u0026rdquo;:\u0026ldquo;jdmar3\u0026rdquo;,\u0026ldquo;pass\u0026rdquo;:\u0026ldquo;553d1b0339e9565f8e11922ad16fbf3f\u0026rdquo;} $ curl -X GET http://localhost:5000/app/user/2/ {\u0026ldquo;id\u0026rdquo;:2,\u0026ldquo;user\u0026rdquo;:\u0026ldquo;test\u0026rdquo;,\u0026ldquo;pass\u0026rdquo;:\u0026ldquo;9241818c20435c6672dac2c4b6e6c071\u0026rdquo;} $ curl -X POST -d \u0026ldquo;user=newtest\u0026amp;pass=supersecurepassword\u0026rdquo; http://localhost:5000/app/new/user/ {\u0026ldquo;message\u0026rdquo;:\u0026ldquo;1 record createed: ID 3 (201)\u0026quot;} $ curl -X PATCH -d \u0026ldquo;user=oldtest\u0026amp;pass=adifferentpassword\u0026rdquo; http://localhost:5000/app/update/user/2/ {\u0026ldquo;message\u0026rdquo;:\u0026ldquo;1 record updated: ID 2 (200)\u0026quot;} $ curl -X DELETE http://localhost:5000/app/delete/user/2/ {\u0026ldquo;message\u0026rdquo;:\u0026ldquo;1 record deleted: ID 2 (200)\u0026quot;}\n","description":"In this assignment we are going to build an Application Programmin Interface (API) that interacts with a user database... and talk about how easy this is.","id":10,"section":"assignment","tags":null,"title":"a04 Build an API from scratch","uri":"https://comp426.johndmart.in/assignment/a04/"},{"content":"JavaScript Functions - w3schools\nFunctions - JavaScript - Mozilla Developer Network\nDifferences Between var and let - JavaScript Tutorials\n","description":"Some guides related to using functions in JavaScript.","id":11,"section":"guide","tags":null,"title":"JS Functions","uri":"https://comp426.johndmart.in/guide/javascript/functions/"},{"content":"Node.js v16.10.0 documentation\nECMAScript Modules (ESM) ECMAScript Modules (ESM) documentation\nUsing ECMAScript modules (ESM) with Node.js - Diogo Souza\n","description":"Node.js makes it possible to create and package JavaScript applications and manage dependencies.","id":12,"section":"guide","tags":null,"title":"Node","uri":"https://comp426.johndmart.in/guide/javascript/node/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Mac running OSX.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome.\u0026rdquo; Accept the Agreement. Open the installer and follow it through completion.  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download/ Select the \u0026ldquo;Macintosh Installer\u0026rdquo; under the LTS tab. After the download completes, open the installer. Follow the installation instructions using the default settings to completion.  git - Developer Tools  Click on the Spotlight icon, the magnifying glass in the top right corner of your screen (or press Command+Space) Type in the word \u0026ldquo;Terminal\u0026rdquo; and press Enter. In the window that pops up, type in the word \u0026ldquo;git\u0026rdquo; and press enter. You will be prompted to install Command Line Developer Tools. Agree to this, even if you are on battery power. Let the installation complete.  You will also find a good guide to get started with installing git here.\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Mac zip file  Double click the downloaded \u0026ldquo;VSCode-darwin-stable.zip\u0026rdquo; file. This extracts and creates an application named \u0026ldquo;Visual Studio Code\u0026rdquo; in your downloads folder. Drag the \u0026ldquo;Visual Studio Code\u0026rdquo; file from your Downloads folder to your Applications folder. You should see the Applications folder in the left-hand sidebar of your Finder window.  Restart your computer once all software has been installed.\nReturn to a00 main page\n","description":"Instructions for installing required software on Mac OSX","id":13,"section":"guide","tags":null,"title":"Software Setup for Mac OSX","uri":"https://comp426.johndmart.in/guide/software/mac/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Windows computer.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome\u0026rdquo; Accept the Agreement Open the ChromeSetup.exe installer and press \u0026ldquo;Yes\u0026rdquo; if prompted for permission to install  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download Select the \u0026ldquo;Windows Installer\u0026rdquo; under the LTS tab. If given the option, select the 64-bit option.  After the download completes, open the installer. Continue through the installation screens using the default settings until the install is complete.  git and bash - Developer Tools  Follow this link: https://git-scm.com/downloads Select \u0026ldquo;Windows\u0026rdquo;  After the download completes, open it. Continue through the installation screens using the default settings until the install is complete.  You also will find a good guide to get started with installing git here.\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Windows installer  Open the downloaded installer Continue through the installation screens using the default settings until the install is complete.  Return to a00 main page\n","description":"Instructions for installing required software on Windows","id":14,"section":"guide","tags":null,"title":"Software setup for Windows","uri":"https://comp426.johndmart.in/guide/software/windows/"},{"content":"Here are some links to validators that you can use to check your assignment code. We will run all your code through a validator as part of your assignment submission. You should too.\nValidators will tell you exactly what you need to know to fix the errors in your code.\nHTML, CSS, etc. W3C Markup Validation Service (HTML)\nW3C has a bunch of different validators that can check CSS, web platforms (mobile ready), dead links, RSS, and one that checks all of these things.\nCollection of W3C validators\nJSON JSONLint - The JSON Validator\nJSON Formatter (Best JSON Formatter and Validator)\nJSON Formatter and Validator\nJavaScript JSHint, a JavaScript Code Quality Tool\nJavaScript Validator - Code Beautify\nOnline JavaScript Validator - BeautifyTools\n","description":"","id":15,"section":"guide","tags":null,"title":"Validators","uri":"https://comp426.johndmart.in/guide/validators/"}]