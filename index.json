[{"content":"Syllabus day 2022-01-11T15:30:00-05:00\nRead the syllabus and learn how you can get a million points!\nUsing GitHub for class 2022-01-13T15:30:00-05:00\nWeb basics History of the Web - Sir Tim Berners Lee\nA Short History of the Web - CERN\nGitHub organization for info You can find general information about the course (in addition to what is provided on this site) here: https://github.com/comp426-2022-spring/general-info\nFor questions and general troubleshooting/problems/etc. related to this class, create an issue on the general-info repo: https://github.com/comp426-2022-spring/general-info/issues\nGitHub issues for help with assignments Use the issues feature in GitHub to get help with assignments.\nEach assignment will have its own template repo. The repo for a00 is here: https://github.com/comp426-2022-spring/a00\nTo create an issue for a00, go here: https://github.com/comp426-2022-spring/a00/issues\nThis will help the instructional staff address your issues more efficiently and effectively during office hours.\nIt will also help triage and sort out issues that multiple students are having.\nPlease create an issue BEFORE you come to office hours.\nInclude a description of your issue, error logs, and screenshots to help us better understand what is happening.\nPlease use issues instead of email for help with assignments. If you email the instructional staff with questions about assignments, you will be directed to create an issue on the appropriate GitHub repo.\nGitHub discussions for other stuff If you do not have something that you think is worthy of an issue, but would like to discuss it with the instructional staff or other students, please use the discussion that has been set up for the general-info repo.\nAnnouncements will also be posted here and be marked as such.\n","description":"Syllabus day `\u0026\u0026` Using GitHub for class","id":0,"section":"w","tags":null,"title":"w00 Onboarding","uri":"https://comp426.johndmart.in/w/00/"},{"content":"DUE: 2022-01-21T00:00:00-5:00\nThe purpose of this is assignment is to get familiar with the tools that we will be using in COMP 426 for the rest of the semester as well as the assignment submission process.\nNote that this first assignment, a00, is graded only for general completion. Future assignments will be much deeper in scope, and you should expect to spend significantly more time on them.\nInstall Required Software Below are links to guides for installing the required software for this course. It is all free software and it is mostly open source software, with the exception of Chrome. Chrome is built on the Google\u0026rsquo;s open source Chromium code base, BUT Chrome itself is licensed as proprietary software.\nYou are not expected to purchase software for this course.\nThis software must be installed on your computer not only so you can complete the assignments, but also so you can receive help in office hours.\nYou will be installing the following:\n Chrome (web browser) Node.js (Javascript Runtime) git (version control/wofkflow management) bash (command shell) - Windows users will need to install the Windows Subsystem for Linux. MacOS and Linux users will already have this installed. VSCode / VIM (text editor)  You do not have to use a specific text editor for this class. HOWEVER, you should use a code editor that has good syntax highlighting.\nI encourage you to install and learn VIM in addition to or instead of VSCode.\nVisual Studio Code is recommended for COMP 426 as it is installable cross-platform and is also configured as the default IDE for our GitHub classroom assignments.\nWhenever you are installing software for development purposes, you should pay attention to version and backward compatibility.\nUnderstand the difference between current or latest versions and the Long Term Support (LTS) versions of packages you are using.\nIn this course we will use the current Node LTS version 16.13.2 (LTS). Node flipped from 14 as the LTS version to 16 in November 2021, so some techniques might need adapting but we will deal with that as it comes.\nMy recommendation is that you use a Node version manager of some kind to install and manage Node. It makes knowing what version you are using and keeping it up-to-date a lot easier.\nA note on installing software I am not going to labor over teaching you to install software in this class.\nYou are in a programming class. It is my expectation that you have, at the very minimum, the ability to understand how to install and configure software.\nThe instrutional staff is happy to help you if you run into snags, but bear in mind that before you come to us with questions related to software installation and management, you should have exhausted all available resources in the form of documentation and reading (and Googling) error messages, etc.\nThis is your first opportunity for a bit of \u0026ldquo;Physician, healh thyself,\u0026rdquo; in this class.\nYou can do these things. You can FIGURE OUT HOW to do these things.\nI believe in you.\nWindows If you are running Windows, follow the Windows setup guide.\nREMEMBER: if you are using Windows, it is super important that you pay special attention to installing the Windows Subsystem for Linux.\nThis will allow you to run a Linux development environment, which is hugely helpful to you as a skill, and also makes teaching this course more straightforward, because everyone will have access to a UNIX-like system to develop on.\nMac If you have a Mac running OSX, follow the Mac setup guide.\nLinux If you run Linux, and you don\u0026rsquo;t already have the above list installed, you can follow the Linux setup guide.\nJoin GitHub classroom  Make sure you are logged into GitHub: https://github.com/login If you do not have a GitHub account, then create one and log in. Use the assignment link for this assignment: https://classroom.github.com/a/V3VIssyS.a On the next page, click the green button that says \u0026ldquo;Accept this assignment.\u0026rdquo; Read the text on the page that follows. It will say that it is configuring your repository and that you should refresh the page. Refresh the page. You will now see a page that shows a link to your repository. NB: This repository doesn\u0026rsquo;t exist under your GH account directly, but under the \u0026ldquo;organization\u0026rdquo; that owns the GitHub Classroom (jdmar3-comp426). Open the link to your repository page for a00, which should have the form of https://github.com/jdmar3-comp426/a00-$YOURGITHUBUSERNAME.  Set Up Workspace Now that you have installed all the preqrequisite software and joined our GitHub classroom, you can create your workspace and organize yourself for class.\nOur recommendation is that you create a directory called \u0026ldquo;comp426\u0026rdquo; or something similar which you will use to keep all of your work in.\nYou will have a repository for each assignment and so you can use this directory to clone all of your repos into.\nSome of the assignments have their own starter code and some are just blank repos that you will commit your code to and then push back up to GitHub.\nClone the starter code repo There are multiple ways to clone a repo and get yourself up and running.\nBelow we will detail doing this in VSCode and in a Bash shell.\nVSCode  Open Visual Studio Code (You can also do this by clicking on the VSCode button right in your repo page. You will have to authorize VSCode to use your GH account to install a GitHub Classroom plugin.) Click the Explorer tab on the left. You will see a button that says \u0026ldquo;Clone Repository\u0026rdquo; (hopefully). Follow the prompts for authorizing VSCode to use your GH account. You should see a bar at the top that says \u0026ldquo;Provide repository URL or pick a repository source.\u0026rdquo; Go back to your repository page for your repository and click the green button that says \u0026ldquo;Code.\u0026rdquo; Copy the repo link. Paste the link into the repository bar and press enter. It will prompt you for a location to clone the repo into. Once it is cloned, VSCode will ask if you want to open the cloned repository. Open it. You should now see the contents of your repository in VSCode.  BASH $ cd Documents $ mkdir comp426 $ cd comp426 $ git clone https://github.com/jdmar3-comp426/`a00-$YOURGITHUBUSERNAME`.git Cloning into 'a00-johnmar3'... remote: Enumerating objects: 12, done. remote: Counting objects: 100% (12/12), done. remote: Compressing objects: 100% (10/10), done. remote: Total 12 (delta 2), reused 2 (delta 0), pack-reused 0 Receiving objects: 100% (12/12), 14.37 KiB | 7.19 MiB/s, done. Resolving deltas: 100% (2/2), done. $ cd a00-$YOURGITHUBUSERNAME $ ls Et voila! You are in the directory containing your repository! You should be able to see the base files in the repository after your ls command. Now you can open in it whatever editor you wish.\nCreate a demo project After completing the last section, your computer should be set up for developing websites in COMP 426! Let\u0026rsquo;s run through a quick demo to make sure everything works.\nFor this demo, we\u0026rsquo;re going to pretend we\u0026rsquo;re starting a new web dev project. We\u0026rsquo;ll set up a new project directory using npm and Visual Studio Code. Pay close attention to this process, because you\u0026rsquo;ll want to repeat it every time you start working on a new COMP 426 assignment that does not already have a packages.json file in it. In fact, this process can even be used outside of class in the real world to get set up working on new web-based projects.\nCreate a project directory and initialize with npm The first step for starting a new project is usually to create a new folder that will store your project code. However, for this assignment and for others, you will already have a directory created when you clone your assignment repo. You can see these folders in the left side panel of Visual Studio Code, which shows the file explorer.\nThe file explorer can be toggled open or closed by clicking on the pictured icon.\nIf you were going to be creating a new project folder, you could do it by right clicking in the empty space at the bottom of the explorer and clicking \u0026ldquo;New Folder.\u0026rdquo; However, for this demo we will just use the existing folder a00-$YOURGITHUBUSERNAME.\nNext, right click on the folder a00-$YOURGITHUBUSERNAME and click \u0026ldquo;Open in Terminal.\u0026rdquo; This will open a new terminal window pointing at the a00-$YOURGITHUBUSERNAME folder. This raises an important fact about terminals\u0026mdash;they always point to a specific folder location in your computer. Usually, the terminal prompt will give some indication of which folder it is currently pointing at. For instance, you might see something like this:\n1  your-computer-name:`a00-$YOURGITHUBUSERNAME` yourname$   The important thing here is a00-$YOURGITHUBUSERNAME, which indicates that you are currently in the a00-$YOURGITHUBUSERNAME folder.\nThere is a special terminal command, pwd, which tells you exactly which folder the terminal is currently in. pwd stands for \u0026ldquo;print working directory.\u0026rdquo; Try running pwd in your terminal window now, and verify that it is pointing to the a00-$YOURGITHUBUSERNAME folder.\n1 2  $ pwd /home/YOURUSERNAME/Documents/comp426/`a00-$YOURGITHUBUSERNAME`    Whenever you are working on a particular assignment, it is absolutely crucial that you run any related terminal commands from inside the assignment\u0026rsquo;s folder.\n Once you have confirmed that your terminal is pointing to the a00 folder, run the command npm init. This command tells npm to create a brand new web project in the current folder. As part of the initialization process, it\u0026rsquo;ll ask you a long list of questions about your new web project. It\u0026rsquo;s okay to just press enter through all the prompts.\n1  $ npm init    What does running npm init actually do? It\u0026rsquo;s actually pretty simple: it just creates a new package.json file in the current directory. The package.json file is npm\u0026rsquo;s version of a configuration file for your entire web project. It includes lots of valuable information about your project including the project\u0026rsquo;s name, version, description, and author. It also includes a list of the dependencies that your project relies on, and a list of custom scripts, or actions, that may be a part of your web application. The answers you type to the questions asked during the npm init process are used to add more information to the package.json file that is created for your project.\n At this point, the a00-$YOURGITHUBUSERNAME folder should now have a brand new package.json file with the following contents:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;name\u0026#34;: \u0026#34;a00\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }   Add some HTML Next, let\u0026rsquo;s add some html. Right click on the a00-$YOURGITHUBUSERNAME folder, select \u0026ldquo;New File,\u0026rdquo; and name the new file index.html.\nWrite (do not copy and paste) the following code into the new file and save:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Alphabet\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Alphabet table\u0026lt;/h1\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Column 0\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Column 1\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;A\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;B\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;C\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;D\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;E\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;F\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;G\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Commit changes You have just added a file. Save it and then look at the tabs on the left. You should see one that has a blue dot with a number: it is the source control tab. This means that you have changes you need to commit.\nYou can review the changes and explore the tree, etc. For now, click the check mark, which will trigger a commit. A bar will appear at the top asking you to write a commit message. Write something meaningful to let your future self know what you did: \u0026ldquo;added index.html\u0026rdquo;.\nTo make a commit in your terminal from inside the a00-$YOURGITHUBUSERNAME directory, run the following:\n$ git add -v . $ git commit -a -m \u0026quot;added index.html\u0026quot; The first command adds any new files that you created. The second command commits the changes and leaves a log message. Make commits anytime you add or edit files after you have tested them to make sure they are working properly. To test them, keep following these instructions.\nInstall Browsersync Next, we\u0026rsquo;re going to use npm to add our first dependency to the new a00 web project. The package we\u0026rsquo;ll add is called Browsersync, and it will help make web development much easier! Browsersync is a \u0026ldquo;dev server,\u0026rdquo; and its job is to show you what your website looks like in real time as you actively make changes to your code. Browsersync works by pretending to be a real web server, running in the background on your computer and monitoring changes to the files in your project directory. Although it\u0026rsquo;s optional, you may wish to install and use Browsersync when working on all assignments for COMP 426.\nTo install Browsersync as a dependency for a00-$YOURGITHUBUSERNAME, run the following command inside the a00-$YOURGITHUBUSERNAME terminal:\n1  $ npm install browser-sync    Remember back in Section 2.2 when we ran npm install to install dependencies for the COMP 426 code? This time we\u0026rsquo;re adding the extra word (called a command line argument) browser-sync to the command. This tells npm to search online for the package named browser-sync, add it as a dependency to our new project a00, and download it. One simple command automatically added a powerful third-party program to your new app\u0026mdash;without even writing a single line of code! We\u0026rsquo;ll be using npm install a lot this semester to add other third-party packages to our code.\n Note: To get credit for a00, you must have Browsersync added as a dependency to your project.\nStart the development server With the simple index.html file in place, its time to see if things actually work. Using the terminal inside the a00-$YOURGITHUBUSERNAME folder, run the following command to start the development server:\n1  $ npx browser-sync start -sw   A browser window should have been automatically opened, showing the HTML page we created in the prior step. If not, open http://localhost:3000/ in Google Chrome. You should see the text inside the \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; and \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; now being rendered on the website.\n Note: The command npx browser-sync start -sw is worth memorizing, especially if you plan to use Browsersync for assignments in COMP 426 (which is highly recommended). Browsersync is actually quite a powerful tool, although we won\u0026rsquo;t get into the more advanced features. If you\u0026rsquo;re interested in learning more, here\u0026rsquo;s a list of the supported command line options. The -sw part of the command tells Browsersync to serve your files locally and actively watch for changes that you may be making to the code. Because we didn\u0026rsquo;t install the browser-sync globally we need to use the npx command to run it locally.\n Edit Some HTML The beauty of using a local web server as you develop is that every time you save your changes, the updated version of the website will be immediately shown in the browser window.\nTo demonstrate this, we\u0026rsquo;re about to make a change to the index.html file created earlier. The instant you save the changes you make, you should see the webpage automatically reload to reflect the change. This makes development much easier and faster. Get used to this workflow because it is a standard method for viewing changes as you are making them and it will make the rest of your assignments MUCH easier!\nOpen your index.html file and find the last row of the table that you created earlier. It should look like this:\n1 2 3  \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt;   Now look at the table in browser sync.\nYou will see that some of the letters of the alphabet are in Column 0 and others are in Column 1.\nI want you to complete the table, by adding a new row for each remaining letter of the alphabet.\nPlace the remaining letters for subsequent rows in either Column 0 OR Column 1, BUT NOT both. You can place them into columns in whatever way makes some kind of sense to you. Just make sure that there is one letter and one blank cell per row.\nAs you go, save the changes you are making, and watch the webpage instantly reload in the browser and add new rows to your table!\n If you\u0026rsquo;re on Windows, save by pressing Ctrl + S on your keyboard. If you\u0026rsquo;re on a Mac, save by pressing Cmd + S.  Stop the development server You may have noticed that back in Visual Studio Code, the terminal panel still looks something like this:\nThere\u0026rsquo;s no dollar-sign prompt ($), and the terminal won\u0026rsquo;t let you type text into it. This is because Browsersync is still running and is using up that whole terminal. If you ever needed access to a second terminal while Browsersync was running, you could always start up another one with View -\u0026gt; Terminal.\n Visual Studio Code understands that you may need to use multiple terminals at once, and it provides an easy way to switch between them: the small drop-down to the right of the word \u0026ldquo;TERMINAL\u0026rdquo; in the screenshot above. Clicking that drop-down displays a list of all the active terminals running in Visual Studio Code. You can kill, or delete, a terminal with the trash can icon. This immediately terminates whatever process is running in the terminal and shuts that terminal down. Other terminals in Visual Studio Code will be unaffected by this action.\n Whenever you finish working, you may wish to stop the Browsersync development server. One way to do this is by clicking the trash can icon, thereby killing the whole terminal window. Another way is to click back on the terminal that has Browsersync running (see screenshot above) and press the Ctrl + C keys on your keyboard. This should exit Browsersync and return the terminal back to a dollar-sign prompt ($).\n Pressing the Ctrl + C keys while working in a terminal sends a special interrupt (SIGTSTP or \u0026ldquo;terminal stop\u0026rdquo;) to the process currently running on that terminal. That interrupt forces the process to close.\n Submit the assignment If you\u0026rsquo;ve made it to this point, you\u0026rsquo;ve finished a00. The final step is to push the code you created.\nAll assignments in COMP 426 will be submitted by pushing code back to the repository you cloned.\nPush your code  In VSCode, go to the source control tab that you used before. Make sure that all of the changes are committed. Click the little three dot menu a few items away from the check mark. Select \u0026ldquo;Push\u0026rdquo; from the dropdown menu.  THAT\u0026rsquo;S IT! YOU\u0026rsquo;RE DONE WITH THE FIRST ASSIGNMENT!\nThe autograder will do its thing and you should be able to see if your code meets all the requirements by clicking on the Actions tab in your GH repo after you have pushed. The autograder can take a minute or two, so be patient.\nIf your code doesn\u0026rsquo;t pass one of the tests, try to figure out why it didn\u0026rsquo;t pass, fix the error, commit, and push.\nYou can commit and push changes as many times as you need to pass all the tests. This goes for every assignment, not just this one. You always have the option of pushing new changes to autograded assignment repos.\nA note about HTML validation If you copied and pasted the HTML from the above block into index.html, then it will not parse as valid because there are intentional whitespace errors in the example block that you probably missed. It is good practice to run your HTML through a validator. Get into the habit of doing this and learning how to read the output so that you can deal with errors. Familiarize yourself with the W3C validator: https://validator.w3.org, which you can use to validate the HTML for this assignment.\n","description":"This assignment for COMP 426 will help you get through setting up tools and installing some of the basic software you will need to have for the course. It is a walkthrough for installing and setting up your development environment, including: Node.js, VIsual Studio Code, Chrome, git, and using GitHub Classroom for submissions. ","id":1,"section":"a","tags":null,"title":"a00 Setup","uri":"https://comp426.johndmart.in/a/00/"},{"content":"git is a distributed version control system that keeps track of the changes between plaintext source files. It can be used for collaboration or for managing and keeping track of workflows for individuals. While primarily intended for software source code, git works with any plaintext files, and so can also be used for authoring of other kinds.\ngit basics git official documentation\nYou should become conversant with the official documentation for git. It has everything you need to know, all in one place.\ngit - The Simple Guide (Download PDF)\nThe guide above is, hands down, the best, most straightfoward guide to get you going or refresh your memory for git commands.\n[An Ultimate Guide to git and GitHub - Suhail Kakar](https://dev.to/suhailkakar/an-ultimate-guide-to- git-and-github-20j)\nGit Cheat Sheet - GitHub\nGit Tutorials and Training - Atlassian\nUsing gitignore You can place a file in the root of your repository directory named .gitignore and add paths which will be specifically excluded by git when you add files and commit changes. This is a good idea to do with Node.js packages in particular, since otherwise you are just moving around a bunch of dependencices that can be automatically downloaded by npm instead.\nHow to add folder to gitignore - Edpresso Team\nA collection of .gitignore templates\nThis is a good resource. You will likely want to add the text from Node.gitignore to your .gitignore file for most assignments.\n","description":"Save your your whole workflow (and your sanity) with git. Never lose edits again.","id":2,"section":"guide","tags":null,"title":"git","uri":"https://comp426.johndmart.in/guide/git/scm/"},{"content":"GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. It also adds a social interaction layer to the process of managing version-controlled source files.\nGitHub Basics Hello World - GitHub Guides\nKeeping GitHub forks up to date with upstream source Keeping your forked repo synced with the upstream source - Nitin Venkatesh\nSyncing a fork - GitHub Help\n","description":"Keep your git repos in the cloud for redundancy and collaboration.","id":3,"section":"guide","tags":null,"title":"GitHub","uri":"https://comp426.johndmart.in/guide/git/hub/"},{"content":"GitHub Actions allows for testing, compiling, and other workflow tasks to be performed on GitHub after you push to a repository housed there. COMP 426 uses these for autograding and other basic evaluation of assignments when you submit them. It is useful to become familiar with how it works so that you can monitor your autograded assignments when you submit them.\nGitHub Actions - GitHub Docs\n","description":"Automate a variety of test and compile workflows server-side on GitHub.","id":4,"section":"guide","tags":null,"title":"GitHub Actions","uri":"https://comp426.johndmart.in/guide/git/hubactions/"},{"content":"GitHub Classroom allows your instructors to distribute starter code for assignments, automatically create and manage repositories for student work, and automatically grade work sumbitted by push to GitHub. This is how all assignments will be managed for COMP426.\nYou can install an extension in VSCode that will let you simplify the process of accepting and submitting assignments.\nInstall GitHub Classroom extension on VSCode\n","description":"Interact with the assignments for COMP 426 in a GitHub Classroom instance.","id":5,"section":"guide","tags":null,"title":"GitHub Classroom","uri":"https://comp426.johndmart.in/guide/git/hubclassroom/"},{"content":"HTML and CSS The first real assignment is meant to get you comfortable with the basics of HTML and CSS. Whether you know it very well already or if you need a refresher, going through this module and then a01 should put you in a good position to continue through the rest of the assignments.\nKnowing these markup languages is very important for being a good web developer. Both HTML and CSS are straightforward and well-documented.\nWeb langauges and platforms and frameworks change very rapidly and you will, as a web developer, spend a career learning new languages and platforms and frameworks. You will constantly be learning and teaching yourself new things. If you take no other lessons away from this class, take this one: get comfortable looking things up and learning things on your own. It is the only way.\nThe list of resources belows, for example, are the kinds of things that you will want to learn how to find online. Google. Everything.\nHTML describes the web page\u0026rsquo;s structure while CSS describes how that structure should be styled. We are going to provide you a short online course so you can familiarize yourself with these two languages. In the second (after the initial setup) assignment we will be making a simple website using just HTML and CSS. Remember all the assignments are already published so you can look ahead and see what kinds of things you will be expected to do.\nIf you find anything overly confusing, ask on Piazza or reach out during office hours. We will be making it very clear what you will be expected to know for a test when it comes time for that. If you can do the upcoming HTML and CSS assignment a01 without looking things up, then you can consider yourself a genius-level expert. If you can complete a01 while referencing the endless trove of documentation available online, then you are like the rest of us and have a pretty decent working knowledge that is good enough to do web development.\nHTML and CSS is probably the most googleable topic you will ever come across in your CS career. Don\u0026rsquo;t be afraid to look things up, but make sure you aren\u0026rsquo;t just copy-pasting things from Stack Overflow either.\nRecommendations for self Study Code Academy CodeAcademy - Learn HTML and CSS\nYou will have to sign up for an account, but it is totally free. You should complete the following tutorials:\nHTML  Elements and Structure Tables (know the basics) Forms (know the basics there will be an assignment on this later) Semantic HTML (optional and not required, just make yourself familiar with it so you can sound smart if you see it at a job)  CSS  Selectors and Visual Rules The Box Model Display and Positioning Colors (optional) Typography (optional) Grid (Skip this and learn basic Flex) CSS Transitions (optional)  w3schools The w3schools site is an excellent resource for the markup and programming languages that we will be using in this course. Get comfortable working through the tutorials both as self-study resource and as a reference tool.\n w3schools HTML w3schools CSS  Mozilla Developer Network (MDN) The Mozilla Developer Network has excellent guides and documentation on all things related to web development.\n MDN HTML MDN CSS.  TutorialsPoint For those of you who just want to read things I\u0026rsquo;d check out TutorialsPoint\u0026rsquo;s pages on HTML and CSS. I don\u0026rsquo;t think the CSS one is very good and you would be better off with the Code Academy one.\nAssessment There is no graded assessment component for course modules. We will not be giving you graded quizzes or anything. However, it will be effectively impossible to successfully work through any aspect of this course going forward without famililarity manipulating, writing, and editing HTML and CSS.\nHere is a list of online quizzes that you can and should take on your own to test and evaluate your knowledge. It would behoove you to take these quizzes and then review things that you find difficult. Practice.\n GeeksforGeeks w3schools HTML Quiz w3schools CSS Quiz ProProfs HTML Quiz with Answers Khan Academy HTML/CSS Recap TutorialsPoint HTML 5 Online Quiz TutorialsPoint CSS Online Quiz CSS Portal CSS Quiz Quizizz HTML and CSS Quiz 1  ","description":"Knowing how to write, edit, and manipulate HTML and CSS is integral to web development. Here are some pointers for refreshing your HTML and CSS skills.","id":6,"section":"module","tags":null,"title":"mod01 HTML + CSS Crash Course","uri":"https://comp426.johndmart.in/module/mod01/"},{"content":"What is it? This is a class about building things that make the web go. We\u0026rsquo;re going to learn how to do that by doing that.\nWhat are we doing? This semester we are going to focus on systems for collecting and managing public health information because we are in an ongoing public health crisis and that seems really relevant.\nCOVID-19 is still a thing We\u0026rsquo;re going to be doing Zoom class for the first few weeks until we see how things are going around campus with COVID-19. None of us want to be in a room with 210 other people all breathing the same air right in the middle of a pretty bad surge of a highly transmissible variant of SARS-COV-2 (Omicron edition).\nAfter we start meeting in-person, I will still host all sessions live on Zoom and record them.\nIf you are sick AT ALL IN ANY WAY, then DO NOT COME TO CLASS.\nLog into Zoom or watch the sessions later instead.\nWhat are we going to learn about? We will learn to use a bunch of Node.js packages and write a bunch of JavaScript. We will learn to build and use RESTful APIs. We will learn to build front-end interfaces using JS, HTML, and CSS to send and retrieve information to and from an API/back-end, respectively. Yes, we will make something with React also.\nWhat are the assignments? There is a series of individual assignments intended to help you develop the skills necessary for working on your final project assignment.\nYou will work in a team on a final project application that deals with public health information, which you will begin planning in the second week of class.\nWhat about grades? Grading will be done on a scale of 1,000,000 points. Literally.\nGrading will also be done by robots. We will give you qualitative feedback, too!\nAre there exams? Yeah, but they are not really like the exams you are used to. The exams assess familiarity with concepts and are really an assessment of my teaching rather than your ability to memorize things.\nWhat will class be like? Sometimes I will talk about conceptual stuff on slides. Sometimes I will do live demos of things related to your assignments.\nHow do we do things? We will use GitHub. We will talk about open source and licensing. We will learn how to work collaboratively.\nCTRL+C CTRL+V? Do your own work (but ask for help when you need it). Do original work (but find things that inspire you and build on them). Don\u0026rsquo;t plagiarize existing work (seriously, don\u0026rsquo;t). Reference things that you find useful. Follow the license terms of any code you adapt and identify where it comes from.\n*sigh* Everything is a lot right now. Will it ever get better? Mental health and general well-being are important. We can\u0026rsquo;t learn anything if we are beset at all sides by stress. We have to tke care of ourselves and each other or we are nowhere.\nBe kind to one another and the instructional staff. The instructional staff will be kind to you and we\u0026rsquo;ll all learn some interesting stuff this semester.\n","description":"There is a lot of information here. Please enjoy this no-bs summary.","id":7,"section":"syllabus","tags":null,"title":"tl;dr","uri":"https://comp426.johndmart.in/syllabus/tldr/"},{"content":"a00 walkthrough + Node.js setup 2022-01-18T15:30:00-05:00\n Installing Node with NVM Setting up SSH key authentication Accepting assignments Cloning a repository Getting started with NPM Write and edit some HTML Using browser-sync Write and edit some HTML Ports for testing Adding, committing, and pushing your changes Troubleshooting the output from autograders on GitHub  Useful links a00 instructions\nInstalling Node with NVM\nAdding a new SSH key to your GitHub account\nThe W3C Markup Validation Service\nHTML \u0026lt;th\u0026gt; scope Attribute\nRunning JS with Node 2022-01-18T15:30:00-05:00\n Running JS in a command terminal Structuring an NPM package Node console Scripting and dependencies  ","description":"This week we will introduce Node.js and learn about package management with NPM, creating Node packages, and generally working with packages in git repos.","id":8,"section":"w","tags":null,"title":"w01 Node","uri":"https://comp426.johndmart.in/w/01/"},{"content":"Technical skills Working through this course facliltates students to exercise a range of skils:\n Design and build RESTful API endpoints for access to a server-side information source (database, third-party API, etc.) Design objects using the JavaScript prototype-based object model Employ functional programming techniques implemented in JavaScript for asynchronous event-handling Use asynchronous techniques to implement client-server interactions with a RESTful API Manipulate the Document Oject Model (DOM) using a variety of techniques for presenting information client-side Construct client-side/browesr-based interactive applications/interfaces Use CSS and HTML for basic aesthetics in interface design  Planning and management skills In addition to the above, students will be able to:\n Manage source code using git and GitHub Basic package structure using Node.js Jump-start prototyping with JS libraries like React, Next.js, and Express and CSS frameworks like Bulma and Bootstrap Plan and manage projects while collaborating with a team Ask design questions for basic interaction flows  ","description":"Working through this course should give students a range of skils related to building and implementing web back-end and front-end applications as well competency in collaborative development and project management.","id":9,"section":"syllabus","tags":null,"title":"Course objectives","uri":"https://comp426.johndmart.in/syllabus/objectives/"},{"content":"Class sessions We will combine demonstrations and lectures with hand-on work in class. Some class time will be reserved for you to work with your teams.\nRemote availability Class sessions are all going to be available to stream live on Zoom. This is intended to help manage dealing with the uncertainty of conditions this semester.\nSession recordings Sessions will all be recorded and archived in Panopto so that you can access them later.\nResources Readings Resources for conceptual information and technical documentation will all be linked from the session pages on the course site. You are not expected to buy any books or other resources for this course. All assigned resources will be open educational resources or otherwise available online.\nSoftware All of the software required for this course is freely available for distribution online and open source. You are not expected to purchase licenses for any software required for this course.\nAttendance and participation Attendance in class sessions is expected but does not have to always be in-person. There will be interactive components in the class sessions and you will need to interact with other students. These things can be done remotely in some cases.\nWe will not be taking attendance but trust that you will make every effort to attend class sessions and engage with the class. It is to your benefit to do so.\n","description":"Class sessions will be hyflex even when we are running in-person and will combine conceptual discussions and demos. All resources will be made available through the course website. Attendance is expected, but does not have to be in-person all the time. We will be very flexible with how you engage with the class due to COVID-19.","id":10,"section":"syllabus","tags":null,"title":"Course structure","uri":"https://comp426.johndmart.in/syllabus/structure/"},{"content":"In a03, we\u0026rsquo;re writing some basic JS functions that can be called to return values outside of a web browser. This module includes some information and links about JS functions and a walkthrough of creating a very basic set. Some of this is covered in the a03 instructions as well. You can use this as a reference to expand on the information presented in the instructions.\nHow do functions work in JavaScript? Functions in JS work prettymuch the way that functions in any langauge work. You are defining something that can be invoked to do a specific set of tasks so that you do not have to write instructions for those tasks over and over again.\n One weird trick: if you find yourself doing something more than once, then you should probably rwrite a function instead of doing that thing over and over again.\n Functions have a very straightforward definition syntax comprising a few parts:\n name, which invokes the function; parameters, which define local variables as arguments when the function is invoked; and code that gets executed by the function.  If we want to get some sort of information out of our function, then we will need our code to include a return, which is all the stuff that you expect the function to spit out so you can do something else with it.\nBasic function definition syntax looks like this:\n1 2 3 4  function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   As you can see, you can use // to comment single lines in your code inside a function. You can also comment multiple lines by using */ and /* to wrap whatever you want to comment between them. These work across the board in JS and you should be using them in order to leave information for your self. There are tons of examples of comments in a03.\nExport / Import In addition to writing basic functions, we want to be able to olexport them so that we can call them in other places. This requires just a simple modification to the basic syntax listed above:\n1 2 3 4  export function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   Lets\u0026rsquo;s say we have the above code saved in a file called exports.js.\nTo import the same function, you would need the following in another file, we\u0026rsquo;ll call it main.js. We\u0026rsquo;ll also add an invocation of the function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; name(5,6);   In order to get the above to spit out the return value in the terminal, we need to wrap the call in the above block of code with a console.log() function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; console.log(name(5,6));   That should spit out 11 if we were to run main.js in a terminal with node.\nHello, world. In this section, we will do a pretty basic walkthrough for creating, exporting, and importing a \u0026ldquo;Hello, world\u0026rdquo; function. This example will sort of mirror what you are doing in a03.\nGet set up First, open a terminal and create a new directory.\n$ mkdir helloworld Then, let\u0026rsquo;s create some files to get ourselves started.\n$ cd helloworld $ touch helloworld.js $ touch functions.js Then lets initialize our directory as an npm package. You can just accept the defaults suggested by npm.\n$ *npm* init In order to run this, we\u0026rsquo;ll need some help from the ESM package, so let\u0026rsquo;s go ahead and install that now.\n$ *npm* install esm  Normally when you want to run a .js file you just use the command line and call node FileName.js. But because the es6 import and export syntax is experimental in node, we need to use a package called ESM. For us, the user, the only difference is that we now run our node command as follows: node -r esm FileName.js. ESM will not be required in later versions of node.\n Write some code! Now we can open helloworld.js and we\u0026rsquo;ll put the following code in it.\n1 2 3  export function helloWorld(message) { return `Hello, world ${message}` }   Save that script and let\u0026rsquo;s think about what we just did for a minute.\nIn the above script we are defining a function helloWorld() and exporting it so that we can import it and then invoke it elsewhere. It has one parameter, which we have defined as message. Whatever value we insert as the message is going to get returned after the words \u0026ldquo;Hello, world\u0026rdquo;. If you leave the function empty, it will just return \u0026ldquo;Hello, world.\u0026rdquo;\nSo if we want to say \u0026ldquo;Hello, world and exit\u0026rdquo;, then we would call `helloWorld(\u0026lsquo;and exit\u0026rsquo;). There are other ways to do this. The code you see above is one example of how to do this. You may find other examples that work and that is fine.\nNow we need to import our function and call it.\nOpen the main.js file that we created earlier. Put the following in it.\n1 2 3  import {helloWorld} from \u0026#34;./helloworld\u0026#34;; console.log(helloWorld(\u0026#39;and exit\u0026#39;));   Now, what are we doing here?\nWe are importing our previously defined and exported function helloWorld from the helloworld.js script we created earlier. We are using a path relative to our current working directory: ./ means \u0026ldquo;this directory.\u0026rdquo; Since helloworld.js is stored in the same directory, ./helloworld.js means \u0026ldquo;the hello_world.js script stored in this directory.\u0026rdquo; You\u0026rsquo;ll notice that you don\u0026rsquo;t have to put the file extension in the script. Node will assume that we are asking for a JS file.\nNext, we are invoking our function helloWorld(). If we just invoke that on its own, it will not output anything in the terminal. To get it to do that, we need to wrap the function call in console.log().\nSave that file and we\u0026rsquo;ll see if it works!\nRun it! Alright, we\u0026rsquo;ve written some scripts and we have our directory set up with npm. We should be ready to run this and see if it works.\nTo run your script, run the first line in the example below and you should see the output on the second line:\n$ node -r esm main.js Hello world, and exit. You can also have Node run this interactively so that you can change what the function is saying.\nRun:\nnode -i -r esm \u0026gt; The \u0026gt; means that we are in an interactive node session and it is expecting us to type something. So lets type some stuff. Let\u0026rsquo;s import our function (HINT: we do the same thing that we did in the file, but just live on the command line).\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; Don\u0026rsquo;t worry about the \u0026ldquo;undefined\u0026rdquo; thing. It\u0026rsquo;s misleading. It is saying that here was no console output defined, so it echoes \u0026ldquo;undefined.\u0026rdquo;\nWe can turn this off, but for now we\u0026rsquo;re not going to worry about it.\nNext let\u0026rsquo;s see what happens if we continue with our interactive Node session and call our helloWorld() function with different arguments.\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; helloWorld() 'Hello, world undefined' \u0026gt; helloWorld('') 'Hello, world ' \u0026gt; helloWorld('.') 'Hello, world .' \u0026gt; helloWorld('and exit.') 'Hello, world and exit.' \u0026gt; Press CTRL+C twice or type .exit to exit the Node interactive session.\nAnd that\u0026rsquo;s it! We did it! We defined a function, exported it, imported it, and made it do things!\nnpm test If you open up package.json you will notice that there is a field for a test.\nWe left this undefined earlier, but let\u0026rsquo;s define it so that we have another way of running a test of our function.\nLet\u0026rsquo;s put the command that we used to run our main.js file in that field as a test.\nTo do this, make your package.js file look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;name\u0026#34;: \u0026#34;helloworld\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;node -r esm main.js\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;esm\u0026#34;: \u0026#34;^3.2.25\u0026#34; } }   Now, we can run the following in the terminal and it will run the command we set as a test and should generate output that looks like the example below.\n$ npm test \u0026gt; helloworld@1.0.0 test \u0026gt; node -r esm main.js Hello, world and exit. This all feeds directly into a03, which will have you defining a bunch of functions that do different things.\n","description":"Get started writing and calling basic functions in JavaScript.","id":11,"section":"module","tags":null,"title":"mod03 JavaScript Functions","uri":"https://comp426.johndmart.in/module/mod03/"},{"content":"Assignments This is a tentative list of assignments. These may be adjusted or merged depending on how the course flows.\n   Assignment Title Topics covered     a00 Setup Installing software; git and Github; bash/command line   a01 Node Package management; creating packages; Node.js; npm   a02 Functions Running JavaScript as program; JavaScript functions   a03 API Turning functions into endpoints; REST; Express   a04 Get Getting information from an API in a web interface; Next.js   a05 Post Sending information to an API from a web interface   a06 Async Asynchronous interactions; Database interactions   a07 DOM Manipulating the Document Object Model; CSS and HTML   a08 Users Implementing login; React; Wouter   a09 Security Passwords; Protecting user info   a99 Final project Collaboration; Project planning and management    Assignment submission All assignments will be handled by GitHub classroom. Pushing code to the repository created when you accept assignments will submit the assignment for grading.\nYou can submit (push) as many times as you need to in order to pass the unit tests configured in GitHub classroom.\nThere are due dates for the assignments, but think of these as guideposts to help you keep up so that you do not get behind. The due date will not cut off submission.\nYou will always be able to submit or resubmit after the due date has passed.\nYou will not lose points for pushing code to your assignment repos after the due date for a given assignment has passed, ever.\nFinal project Your final project will be developed with a team.\nThis Spring, we are going to focus our attention on public health information apps and systems. Your team will design an app that fits one of the following profiles or similar:\n Public health information dashboard Public health information tracking app (reporting test or vaccine status, etc.) Public health resource tracking app (availability of testing, masks, PPE, vaccination, other supplies, etc.) Emergency management information portal (planning and decision-making for institutions, government, agencies, etc.) Outbreak/cluster tracking app or dashboard Public health information app for end users (to provide useful information and aggregate credible sources)  Your team will use GitHub to plan and manage your project. You will create documentation for both developers and users of your app. You will also create demos as part of that documentation.\nPresenting final projects You will present your final project to the class on 19, 21, or 26 April. It is okay for your project to still be a work in progress when presented.\nAll final project materials will be due on the day scheduled for the final exam.\nAssessments There will be several assessments throughout the course.\nYou will take a questionnaire at the beginning of the course that gives us a baseline for your familiarity with certain tools and concepts.\nThere will also be midterm and final questionnaires, but they will not assess specific knowledge in the way a traditional exam does. Instead they will assess your familiarity with concepts and tools that we are using in the course and allow us to compare across the semester.\nThe midterm and final will include a self-assessment component and also an assessment of your team dynamics.\nThese assessments are designed to evaluate our teaching effectiveness as much as they are designed to assess your skill and familiarity with concepts and tools.\n","description":"There will be a series of programming assignments, a final team project to develop a web application, and several assessments.","id":12,"section":"syllabus","tags":null,"title":"Deliverables and assessments","uri":"https://comp426.johndmart.in/syllabus/assignments/"},{"content":"Grade breakdown Grading will be based on 1,000,000 points. The breakdown is as follows.\n   Component Description Quantity Points Subtotal     Assignments Individual programming assignments 10 50,000 500,000   Final project Team-based app development 1 300,000 300,000   Assessments Questionnaires 3 50,000 150,000   Engagement GitHub commits 100 500 50,000   Total    1,000,000    Components Assignments Each of the individual programmin assignments will be worth 50,000 points and will be automatically evaluated.\nThe autograders will give you feedback so that you can make adjustments to your code to debug it so that it passes the unit tests.\nAssignment due dates The assignment due dates are meant as guideposts, not deadlines.\nYou can always submit or resubmit the assignments (by pushing them to your GitHub repository) after the due date.\nYou will not lose points for push or updating your repos after the due date has passed, ever.\nFinal project points breakdown    Component Description Points     Group planning Documentation of your planning process 50,000   API Back-end API has defined endpoints that you can make queries against. 75,000   Interface Front-end connects to and interacts with API endpoints and stores/retrieves user or other information. 75,000   Documentation There is documentation about what you did and how it works. 50,000   Demo Walkthrough/clickthrough screencap demo of your app and presentation to class. 50,000   Total  300,000    Every member of your team will receive the same number of points for the final project.\nYou will check in with a TA assigned to your team throughout the semester as you plan and build. We will give you qualitative feedback on your work throughout and as part of the final presentation.\nAssessments Questionnaires given at the beginning, middle, and end of the semester.\nEngagement Your engagement score is a count of your GitHub commits. I am gathering this directly from your GitHub repositories submitted for your assignments and your team\u0026rsquo;s final project repos.\nI will gather these counts to encourage you to commit small changes meaning that there should be a lot of them.\nThe number that you are responsible for is actually relatively few. You should easily be able to record over 100 commits over the course of the semester across 10 assignments and the final project. In fact, you should have WAY more than that.\n","description":"Your work in this class will be evaluated in a mostly automated way that gives you immediate feedback. You will also receive qualitative feedback. Grades are reckoned on a 1,000,000-point scale.","id":13,"section":"syllabus","tags":null,"title":"Grading","uri":"https://comp426.johndmart.in/syllabus/grading/"},{"content":"The University of North Carolina at Chapel Hill has had a student-led honor system for over 100 years. Academic integrity is at the heart of Carolina and we all are responsible for upholding the ideals of honor and integrity. The student-led Honor System is responsible for adjudicating any suspected violations of the Honor Code and all suspected instances of academic dishonesty will be reported to the Honor System. Information, including your responsibilities as a student, is outlined in the Instrument of Student Judicial Governance. Your full participation and observance of the Honor Code are expected.\nWhat does this mean for a programming class where we are encouraging collaboration? It means that you should do original work in concert with other members of your group. Assign credit appropriately. Help each other learn how to do things.\nOn individual assignments, you should be writing your own code. But if you need help, then seek it out.\nDo not copy + paste code from the Internet. If you are inspired by open source code, then make a reference to the source in a comment. If you adapt open source code, then adhere to its license and make sure that your work is licensed appropriately.\n","description":"The University of North Carolina at Chapel Hill has had a student-led honor system for over 100 years. Academic integrity is at the heart of Carolina and we all are responsible for upholding the ideals of honor and integrity.","id":14,"section":"syllabus","tags":null,"title":"Honor Code","uri":"https://comp426.johndmart.in/syllabus/honor/"},{"content":"Counseling and Psychological Services (CAPS) CAPS is strongly committed to addressing the mental health needs of a diverse student body throughtimely access to consultation and connection to clinically appropriate services, whether for short or long-term needs.\nGo to their website: https://caps.unc.edu/ or visit their facilities on the third floor of the Campus Health Services building for a walk-in evaluation to learn more.\nHelp us help you If you are struggling, speak to a TA and/or the instructor. We can and will make adjustments that will help you to better cope and thrive in this class.\nThings are hard. You are not alone.\n","description":"It's important to take care of your emotional and mental health and well-being. You cannot learn things if you are in distress. There are resources available to you and we can help you find them.","id":15,"section":"syllabus","tags":null,"title":"Mental health and well-being","uri":"https://comp426.johndmart.in/syllabus/wellbeing/"},{"content":"Accessibility Resources The University of North Carolina at Chapel Hill facilitates the implementation of reasonable accommodations, including resources and services, for students with disabilities, chronic medical conditions, a temporary disability or pregnancy complications resulting in barriers to fully accessing University courses, programs and activities.\nAccommodations are determined through the Office of Accessibility. Resources and Service (ARS) for individuals with documented qualifying disabilities in accordance with applicable state and federal laws. See the ARS Website for contact information: https://ars.unc.edu or email ars@unc.edu.\nAccommodation plans If you have an accommodation plan, please feel welcomed to make an appointment or come to instructor office hours to discuss it. I would like to make sure that we are honoring your plan.\nMost likely, I will work to incorporate accommodations into the course design. This way, we increase the accessibility of the entire course, for everyone.\n","description":"The University of North Carolina at Chapel Hill facilitates the implementation of reasonable accommodations, including resources and services, for students with disabilities, chronic medical conditions, a temporary disability or pregnancy complications resulting in barriers to fully accessing University courses, programs and activities.","id":16,"section":"syllabus","tags":null,"title":"Accessibility","uri":"https://comp426.johndmart.in/syllabus/accessibility/"},{"content":"Title IX Resources Any student who is impacted by discrimination, harassment, interpersonal (relationship) violence, sexual violence, sexual exploitation, or stalking is encouraged to seek resources on campus or in the community.\nPlease contact the Director of Title IX Compliance (Adrienne Allison – Adrienne.allison@unc.edu), Report and Response Coordinators in the Equal Opportunity and Compliance Office (reportandresponse@unc.edu), Counseling and Psychological Services (confidential), or the Gender Violence Services Coordinators (gvsc@unc.edu; confidential) to discuss your specific needs. Additional resources are available at safe.unc.edu.\n","description":"Any student who is impacted by discrimination, harassment, interpersonal (relationship) violence, sexual violence, sexual exploitation, or stalking is encouraged to seek resources on campus or in the community.","id":17,"section":"syllabus","tags":null,"title":"Title IX","uri":"https://comp426.johndmart.in/syllabus/title9/"},{"content":"Ch-ch-ch-ch-changes The instructor reserves to right to make changes to the syllabus, including any project due dates, assessment dates, assignments, or other aspects of the schedule and structure.\nThings change. We live in uncertain times. We will adjust the course accordingly if it becomes necessary to do so.\n","description":"The instructor reserves to right to make changes to the syllabus, including any project due dates, assessment dates, assignments, or other aspects of the schedule and structure.","id":18,"section":"syllabus","tags":null,"title":"Disclaimer","uri":"https://comp426.johndmart.in/syllabus/disclaimer/"},{"content":"JavaScript Functions - w3schools\nFunctions - JavaScript - Mozilla Developer Network\nDifferences Between var and let - JavaScript Tutorials\n","description":"Some guides related to using functions in JavaScript.","id":20,"section":"guide","tags":null,"title":"JS Functions","uri":"https://comp426.johndmart.in/guide/javascript/functions/"},{"content":"Application Programming Interface (API) An API is the interface layer between two pieces of software that don\u0026rsquo;t necessarily speak the same langauge. The function of an API is to translate from one platform/piece of software to another.\nAn API call is a process through which requests are made and data is retrieved from an API by a client. It looks something like this:\n A client makes a request for some data. The requested data is retrieved from an external resource. The data is delivered to the client.  Data can also be manipulated by the API if write actions are permitted.\n A client requests that new data be added and supplies that data. The request is processed by some sort of middleware that interacts with an external resource. Confirmation of receipt and is returned to the client.  RESTful services and CRUD operations REST stands for \u0026ldquo;REpresentational State Transfer\u0026rdquo; and the architecture was originally proposed in a doctoral dissertation at University of California, Irvine by Roy Fielding in 2000.\nThe architecture for a RESTful service meets the following constraints:\n It has a client-server architecture: the user interface is separate from data storage. You will see this referred to as \u0026ldquo;front-end\u0026rdquo; (client) and \u0026ldquo;back-end\u0026rdquo; (server). It is stateles: all requests from the client must contain all information necessary for the server to process the request. State information has to remain on the client and cannot be stored on the server. It must have a client-side cache: this reduces the number of requests made to the server because the client can reuse information that it already has. It must have a uniform interface: this means that the architecture of the client-server interaction is simplified so that the two can be changed independently while still maintaining the same functionality. A uniform interface, as defined, has 4 parts:  Resources: Universal Resource Identifiers (URIs) that identify resources Representation manipulation: a representation of a resource must contain all of the information necessary to modify the resources itself. Self-contained messages: messages must include all information necessary to interpret them. Hypermedia as state: Clients communicate application state through requested URIs, body contents, query-string parameters, and request headers. Servers communicate application state back to clientsas URIs to retrieve objects, body contents, response codes, and response headers.   It must be a layered system: this restricts knowledge to the immediate layer with which the client is interacting by setting up a hierarchy of intermediaries. This is where middleware and distributed resources come into play. It must be capable of code-on-demand: this means that if the API documentation is avaialable, then it should be possible to create or extend a client based on the available endpoints. This constraint is optional, but it does mean that even if documentation is not available, it should be possible to reverse-engineer API calls.  HTTP methods and status codes You will want to familiarize yourself with REST API terminology and structure. Pay special attention to HTTP methods and status codes.\nThe REST API Tutorial\nSQL databases SQL is a language for interacting with data held in databases. SQL uses \u0026ldquo;statements\u0026rdquo; to structure queries. Statements are effectively commands and are (sort of) human readable.\nSome examples of SQL statements relevant to this class:\n1 2 3 4 5 6  CREATE TABLE table1 ( id INTEGER PRIMARY KEY, var1 TEXT, var2 TEXT ) INSERT INTO table1 (var1, var2) VALUES (somedata, someotherdata) SELECT * FROM table1 SELECT * FROM table1 WHERE id = 5 UPDATE table1 SET var1 = COALESCE(somenewdata,var1), var2 = COALESCE(othernewdata,var2) WHERE id = 5 DELETE * FROM table1 WHERE id = 5   Familiarize yourself with how SQL statements work. There are many, many resources available online.\n w3c SQL Tutorial SQL Tutorial for Beginners  We are using SQLite3 for this course, which implements SQL in locally stored database files that do not require a server. The syntax is basically the same, with a few differences.\nWe will be using a JS implementation of SQLite3 called better-sqlite. Full documentation of that implemntation is available here.\nExpress.js Express.js is a \u0026ldquo;minimalist\u0026rdquo; web framework that can be used to create both front- and backend applications in JavaScript. We will be using it to develop an API and consider its frontend components as well.\nExpress will be the main point of translation for connecting API endpoints to a database in our assignments.\nTranslation table The following is a table of \u0026ldquo;verbs\u0026rdquo; related to different components of our API ecosystem. This is provided to demonstrate how they relate to one another across languages and frameworks in both conceptual and practical terms.\n   CRUD SQL HTTP Express What does it do?     Create INSERT POST app.post() Makes a new record.   Read SELECT GET app.get() Retrieves an existing record.   Update (replace) REPLACE PUT app.put() Searches for a record and overwrites it. If it doesn\u0026rsquo;t exist, the record is createed.   Update (modify) UPDATE PATCH app.patch() Modifies the information in an existing record.   Delete DELETE DELETE app.delete() Removes an existing record.    ","description":"","id":21,"section":"module","tags":null,"title":"mod04 REST, CRUD, and databases","uri":"https://comp426.johndmart.in/module/mod04/"},{"content":"Node.js v16.10.0 documentation\nECMAScript Modules (ESM) ECMAScript Modules (ESM) documentation\nUsing ECMAScript modules (ESM) with Node.js - Diogo Souza\n","description":"Node.js makes it possible to create and package JavaScript applications and manage dependencies.","id":22,"section":"guide","tags":null,"title":"Node","uri":"https://comp426.johndmart.in/guide/javascript/node/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Mac running OSX.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome.\u0026rdquo; Accept the Agreement. Open the installer and follow it through completion.  git - Developer Tools  Click on the Spotlight icon, the magnifying glass in the top right corner of your screen (or press Command+Space) Type in the word \u0026ldquo;Terminal\u0026rdquo; and press Enter. In the window that pops up, type in the word \u0026ldquo;git\u0026rdquo; and press enter. You will be prompted to install Command Line Developer Tools. Agree to this, even if you are on battery power. Let the installation complete.  Text editor You can use either Visual Studio Code or VIM (or both) to edit text and write program code.\nVIM VIM is alread installed on MacOS as vi.\nTo bring it up to date, refer to the guide at vim.org: https://www.vim.org/download.php#mac\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Mac zip file  Double click the downloaded \u0026ldquo;VSCode-darwin-stable.zip\u0026rdquo; file. This extracts and creates an application named \u0026ldquo;Visual Studio Code\u0026rdquo; in your downloads folder. Drag the \u0026ldquo;Visual Studio Code\u0026rdquo; file from your Downloads folder to your Applications folder. You should see the Applications folder in the left-hand sidebar of your Finder window.  Node.js via NVM - JavaScript Runtime Use Node Version Manager (NVM) to install Node.js.\nFollow the install instructions avaialable at the GitHub repository for NVM:\nhttps://github.com/nvm-sh/nvm\nRestart your computer once all software has been installed.\nReturn to a00 main page\n","description":"Instructions for installing required software on Mac OSX","id":23,"section":"guide","tags":null,"title":"Software Setup for Mac OSX","uri":"https://comp426.johndmart.in/guide/software/mac/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Windows computer.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome\u0026rdquo; Accept the Agreement Open the ChromeSetup.exe installer and press \u0026ldquo;Yes\u0026rdquo; if prompted for permission to install  Text editor This semester, we will write all assignment code using either VSCode or VIM or both!\nVisual Studio Code (VSCode)  Follow this link: https://code.visualstudio.com/#alt-downloads Download the Windows installer  Open the downloaded installer  VIM Follow the instructions in this tutorial for installing VIM on Windows:\nhttps://linuxhint.com/install-vim-editor-on-windows/\nWindows Subsystem for Linux Windows Subsystem for Linux (WSL) lets you run a Linux development environment on Windows and access it from VSCode.\nMy recommendation is that you use Debian 11 as your chosen distro.\nFollow the instructions here to install it:\nInstall required software in WSL Node.js Follow the instructions in this tutorial for installing Node and related packages in WSL:\nhttps://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl\ngit If you are using Debian or a Debian-based distro like Ubuntu in your WSL, you can use apt to install software, like git.\nFollow the instructions in this tutorial for installing Git in WSL:\nhttps://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-git\nDirect install in Windows If you wish to also install Node and git in Windows natively (not a bad idea to have them available), you can see how to do that below.\nnode.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download Select the \u0026ldquo;Windows Installer\u0026rdquo; under the LTS tab. If given the option, select the 64-bit option.  After the download completes, open the installer. Continue through the installation screens using the default settings until the install is complete.  git and bash - Developer Tools  Follow this link: https://git-scm.com/downloads Select \u0026ldquo;Windows\u0026rdquo;  After the download completes, open it. Continue through the installation screens using the default settings until the install is complete.  Return to a00 main page\n","description":"Instructions for installing required software on Windows","id":24,"section":"guide","tags":null,"title":"Software setup for Windows","uri":"https://comp426.johndmart.in/guide/software/windows/"},{"content":"Here are some links to validators that you can use to check your assignment code. We will run all your code through a validator as part of your assignment submission. You should too.\nValidators will tell you exactly what you need to know to fix the errors in your code.\nHTML, CSS, etc. W3C Markup Validation Service (HTML)\nW3C has a bunch of different validators that can check CSS, web platforms (mobile ready), dead links, RSS, and one that checks all of these things.\nCollection of W3C validators\nJSON JSONLint - The JSON Validator\nJSON Formatter (Best JSON Formatter and Validator)\nJSON Formatter and Validator\nJavaScript JSHint, a JavaScript Code Quality Tool\nJavaScript Validator - Code Beautify\nOnline JavaScript Validator - BeautifyTools\n","description":"","id":25,"section":"guide","tags":null,"title":"Validators","uri":"https://comp426.johndmart.in/guide/validators/"}]