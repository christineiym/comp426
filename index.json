[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"https://comp426.johndmart.in/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"updates","tags":null,"title":"April 2019","uri":"https://comp426.johndmart.in/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"March 2019","uri":"https://comp426.johndmart.in/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"updates","tags":null,"title":"February 2019","uri":"https://comp426.johndmart.in/updates/2019_february/"},{"content":"The purpose of this is assignment is to get familiar with the tools that we will be using in COMP 426 for the rest of the semester as well as the assignment submission process.\nNote that this first assignment, a00, is graded only for completion. Future assignments will be much deeper in scope, and you should expect to spend significantly more time on them.\nInstall Required Software Below are links to guides for installing the required software for this course.\nThis software must be installed on your computer not only so you can complete the assignments, but also so you can receive help in office hours.\nYou will be installing the following:\n Chrome Browser (web browser) Node.js (Javascript Runtime) git (version control/wofkflow management) and bash (command shell, if not already installed) VSCode (text editor)  You do not have to use a specific text editor for this class. HOWEVER, you should use a code editor that has good syntax highlighting.\nVisual Studio Code is recommended for COMP 426, and is also configured as the web-based IDE for our GitHub classroom assignments.\nIf you are willing to sign up for a (free) student license, then WebStorm is also a good choice.\nWhenever you are installing software for development purposes, you should pay attention to version and backward compatibility.\nUnderstand the difference between current or latest versions and the Long Term Support (LTS) versions of packages you are using.\nFor either guide below the course currently supports Node version 14.17.5 (LTS) or 16.8.0 (Latest).\nWindows If you are running Windows, follow the Windows setup guide.\nMac If you have a Mac running OSX, follow the Mac setup guide.\nLinux If you run Linux, and you don\u0026rsquo;t already have the above list installed, you can follow the Linux setup guide\nJoin GitHub classroom Use the assignment link for this assignment provided in both Sakai and Piazza to join the GitHub classroom.\n  Make sure you are logged into GitHub: https://github.com/login If you do not have a GitHub account, then create one and log in.\n  Use the assignment link for this assignment provided in both Sakai and Piazza to join the GitHub classroom.\n  When you follow invite link, you will be presented with a list of email addresses. Find your email address in the list and select it.\n  On the next page, click the green button that says \u0026ldquo;Accept this assignment.\u0026rdquo;\n  Read the text on the page that follows. It will say that it is configuring your repository and that you should refresh the page.\n  Refresh the page.\n  You will now see a page that shows a link to your repository. NB: This repository doesn\u0026rsquo;t exist under your GH account directly, but under the \u0026ldquo;organization\u0026rdquo; that owns the GitHub Classroom (jdmar3-comp426).\n  Open the link to your repository page for a00, which should have the form of https://github.com/jdmar3-comp426/a00-$YOURGITHUBUSERNAME``.\n  Set Up Workspace Now that you have installed all the preqrequisite software and joined our GitHub classroom, you can create your workspace and organize yourself for class.\nOur recommendation is that you create a directory called \u0026ldquo;comp426\u0026rdquo; or something similar which you will use to keep all of your work in.\nYou will have a repository for each assignment and so you can use this directory to clone all of your repos into.\nSome of the assignments have their own starter code and some are just blank repos that you will commit your code to and then push back up to GitHub.\nClone the starter code repo There are multiple ways to clone a repo and get yourself up and running.\nBelow we will detail doing this in VSCode and in a Bash shell.\nVSCode  Open Visual Studio Code (You can also do this by clicking on the VSCode button right in your repo page.  You will have to authorize VSCode to use your GH account to install a GitHub Classroom plugin.) 2. Click the Explorer tab on the left. You will see a button that says \u0026ldquo;Clone Repository\u0026rdquo; (hopefully).\n Follow the prompts for authorizing VSCode to use your GH account.\n  You should see a bar at the top that says \u0026ldquo;Provide repository URL or pick a repository source.\u0026rdquo;\n  Go back to your repository page for your repository and click the green button that says \u0026ldquo;Code.\u0026rdquo;\n  Copy the repo link.\n  Paste the link into the repository bar and press enter.\n  It will prompt you for a location to clone the repo into.\n  Once it is cloned, VSCode will ask if you want to open the cloned repository. Open it.\n  You should now see the contents of your repository in VSCode.\n  BASH $ cd Documents $ mkdir comp426 $ cd comp426 $ git clone https://github.com/jdmar3-comp426/`a00-$YOURGITHUBUSERNAME`.git Cloning into 'a00-johnmar3'... remote: Enumerating objects: 12, done. remote: Counting objects: 100% (12/12), done. remote: Compressing objects: 100% (10/10), done. remote: Total 12 (delta 2), reused 2 (delta 0), pack-reused 0 Receiving objects: 100% (12/12), 14.37 KiB | 7.19 MiB/s, done. Resolving deltas: 100% (2/2), done. $ cd `a00-$YOURGITHUBUSERNAME` $ ls Et voila! You are in the directory containing your repository! You should be able to see the base files in the repository after your ls command. Now you can open in it whatever editor you wish.\nCreate a demo project After completing the last section, your computer should be set up for developing websites in COMP 426! Let\u0026rsquo;s run through a quick demo to make sure everything works.\nFor this demo, we\u0026rsquo;re going to pretend we\u0026rsquo;re starting a new web dev project. We\u0026rsquo;ll set up a new project directory using npm and Visual Studio Code. Pay close attention to this process, because you\u0026rsquo;ll want to repeat it every time you start working on a new COMP 426 assignment that does not already have a packages.json file in it. In fact, this process can even be used outside of class in the real world to get set up working on new web-based projects.\nCreate a project directory and initialize with npm The first step for starting a new project is usually to create a new folder that will store your project code. However, for this assignment and for others, you will already have a directory created when you clone your assignment repo. You can see these folders in the left side panel of Visual Studio Code, which shows the file explorer.\nThe file explorer can be toggled open or closed by clicking on the pictured icon.\nIf you were going to be creating a new project folder, you could do it by right clicking in the empty space at the bottom of the explorer and clicking \u0026ldquo;New Folder.\u0026rdquo; However, for this demo we will just use the existing folder \u0026ldquo;a00-$YOURGITHUBUSERNAME\u0026rdquo;.\nNext, right click on the folder \u0026ldquo;a00-$YOURGITHUBUSERNAME\u0026rdquo; and click \u0026ldquo;Open in Terminal.\u0026rdquo; This will open a new terminal window pointing at the a00-$YOURGITHUBUSERNAME folder. This raises an important fact about terminals\u0026mdash;they always point to a specific folder location in your computer. Usually, the terminal prompt will give some indication of which folder it is currently pointing at. For instance, you might see something like this:\n1  your-computer-name:`a00-$YOURGITHUBUSERNAME` yourname$   The important thing here is a00-$YOURGITHUBUSERNAME, which indicates that you are currently in the a00-$YOURGITHUBUSERNAME folder.\nThere is a special terminal command, pwd, which tells you exactly which folder the terminal is currently in. pwd stands for \u0026ldquo;print working directory.\u0026rdquo; Try running pwd in your terminal window now, and verify that it is pointing to the a00-$YOURGITHUBUSERNAME folder.\n1 2  $ pwd /home/YOURUSERNAME/Documents/comp426/`a00-$YOURGITHUBUSERNAME`    Whenever you are working on a particular assignment, it is absolutely crucial that you run any related terminal commands from inside the assignment\u0026rsquo;s folder.\n Once you have confirmed that your terminal is pointing to the a00 folder, run the command npm init. This command tells npm to create a brand new web project in the current folder. As part of the initialization process, it\u0026rsquo;ll ask you a long list of questions about your new web project. It\u0026rsquo;s okay to just press enter through all the prompts.\n1  $ npm init    What does running npm init actually do? It\u0026rsquo;s actually pretty simple: it just creates a new package.json file in the current directory. The package.json file is npm\u0026rsquo;s version of a configuration file for your entire web project. It includes lots of valuable information about your project including the project\u0026rsquo;s name, version, description, and author. It also includes a list of the dependencies that your project relies on, and a list of custom scripts, or actions, that may be a part of your web application. The answers you type to the questions asked during the npm init process are used to add more information to the package.json file that is created for your project.\n At this point, the a00-$YOURGITHUBUSERNAME folder should now have a brand new package.json file with the following contents:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;name\u0026#34;: \u0026#34;a00\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }   Add some HTML Next, let\u0026rsquo;s add some html. Right click on the a00-$YOURGITHUBUSERNAME folder, select \u0026ldquo;New File,\u0026rdquo; and name the new file index.html.\nWrite (do not copy and paste) the following code into the new file and save:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Assignment 0 test!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Looking good!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Go ahead and edit me.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Commit changes You have just added a file. Save it and then look at the tabs on the left. You should see one that has a blue dot with a number: it is the source control tab. This means that you have changes you need to commit.\nYou can review the changes and explore the tree, etc. For now, click the check mark, which will trigger a commit. A bar will appear at the top asking you to write a commit message. Write something meaningful to let your future self know what you did: \u0026ldquo;added index.html\u0026rdquo;.\nTo make a commit in your terminal from inside the a00-$YOURGITHUBUSERNAME directory, run the following:\n$ git add -v . $ git commit -a -m \u0026quot;added index.html\u0026quot; The first command adds any new files that you created. The second command commits the changes and leaves a log message. Make commits anytime you add or edit files after you have tested them to make sure they are working properly. To test them, keep following these instructions.\nInstall Browsersync Next, we\u0026rsquo;re going to use npm to add our first dependency to the new a00 web project. The package we\u0026rsquo;ll add is called Browsersync, and it will help make web development much easier! Browsersync is a \u0026ldquo;dev server,\u0026rdquo; and its job is to show you what your website looks like in real time as you actively make changes to your code. Browsersync works by pretending to be a real web server, running in the background on your computer and monitoring changes to the files in your project directory. Although it\u0026rsquo;s optional, you may wish to install and use Browsersync when working on all assignments for COMP 426.\nTo install Browsersync as a dependency for a00-$YOURGITHUBUSERNAME, run the following command inside the a00-$YOURGITHUBUSERNAME terminal:\n1  $ npm install browser-sync    Remember back in Section 2.2 when we ran npm install to install dependencies for the COMP 426 code? This time we\u0026rsquo;re adding the extra word (called a command line argument) browser-sync to the command. This tells npm to search online for the package named browser-sync, add it as a dependency to our new project a00, and download it. One simple command automatically added a powerful third-party program to your new app\u0026mdash;without even writing a single line of code! We\u0026rsquo;ll be using npm install a lot this semester to add other third-party packages to our code.\n Note: To get credit for a00, you must have Browsersync added as a dependency to your project.\nStart the development server With the simple index.html file in place, its time to see if things actually work. Using the terminal inside the a00-$YOURGITHUBUSERNAME folder, run the following command to start the development server:\n1  $ npx browser-sync start -sw   A browser window should have been automatically opened, showing the HTML page we created in the prior step. If not, open http://localhost:3000/ in Google Chrome. You should see the text inside the \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; and \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; now being rendered on the website.\n Note: The command npx browser-sync start -sw is worth memorizing, especially if you plan to use Browsersync for assignments in COMP 426 (which is highly recommended). Browsersync is actually quite a powerful tool, although we won\u0026rsquo;t get into the more advanced features. If you\u0026rsquo;re interested in learning more, here\u0026rsquo;s a list of the supported command line options. The -sw part of the command tells Browsersync to serve your files locally and actively watch for changes that you may be making to the code. Because we didn\u0026rsquo;t install the browser-sync globally we need to use the npx command to run it locally.\n Edit Some HTML The beauty of using a local web server as you develop is that every time you save your changes, the updated version of the website will be immediately shown in the browser window.\nTo demonstrate this, we\u0026rsquo;re about to make a change to the index.html file created in Section 3.3. The instant you save the changes you make, you should see the webpage automatically reload to reflect the change. This makes development much easier and faster. Get used to this workflow because it is an industry standard and it should make A1 much easier!\nChange line 11 from:\n1  \u0026lt;p\u0026gt;Go ahead and edit me.\u0026lt;/p\u0026gt;   to:\n1  \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Almost done I promise.\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;   Save the changes you made, and watch the webpage instantly reload in the browser!\n If you\u0026rsquo;re on Windows, save by pressing Ctrl + S on your keyboard. If you\u0026rsquo;re on a Mac, save by pressing Cmd + S.  Stop the development server You may have noticed that back in Visual Studio Code, the terminal panel still looks something like this:\nThere\u0026rsquo;s no dollar-sign prompt ($), and the terminal won\u0026rsquo;t let you type text into it. This is because Browsersync is still running and is using up that whole terminal. If you ever needed access to a second terminal while Browsersync was running, you could always start up another one with View -\u0026gt; Terminal.\n Visual Studio Code understands that you may need to use multiple terminals at once, and it provides an easy way to switch between them: the small drop-down to the right of the word \u0026ldquo;TERMINAL\u0026rdquo; in the screenshot above. Clicking that drop-down displays a list of all the active terminals running in Visual Studio Code. You can kill, or delete, a terminal with the trash can icon. This immediately terminates whatever process is running in the terminal and shuts that terminal down. Other terminals in Visual Studio Code will be unaffected by this action.\n Whenever you finish working, you may wish to stop the Browsersync development server. One way to do this is by clicking the trash can icon, thereby killing the whole terminal window. Another way is to click back on the terminal that has Browsersync running (see screenshot above) and press the Ctrl + C keys on your keyboard. This should exit Browsersync and return the terminal back to a dollar-sign prompt ($).\n Pressing the Ctrl + C keys while working in a terminal sends a special interrupt (SIGTSTP or \u0026ldquo;terminal stop\u0026rdquo;) to the process currently running on that terminal. That interrupt forces the process to close.\n Submit the assignment If you\u0026rsquo;ve made it to this point, you\u0026rsquo;ve finished a00. The final step is to push the code you created.\nAll assignments in COMP 426 will be submitted by pushing code back to the repository you cloned.\nPush your code  In VSCode, go to the source control tab that you used before. Make sure that all of the changes are committed. Click the little three dot menu a few items away from the check mark. Select \u0026ldquo;Push\u0026rdquo; from the dropdown menu.  THAT\u0026rsquo;S IT! YOU\u0026rsquo;RE DONE WITH THE FIRST ASSIGNMENT!\nThe autograder will do its thing and you should be able to see if your code meets all the requirements by clicking on the Actions tab in your GH repo after you have pushed. The autograder can take a minute or two, so be patient.\nIf your code doesn\u0026rsquo;t pass one of the tests, try to figure out why it didn\u0026rsquo;t pass, fix the error, commit, and push.\nYou can commit and push changes as many times as you need to pass all the tests. This goes for every assignment, not just this one. You always have the option of pushing new changes to autograded assignment repos.\nA note about HTML validation If you copied and pasted the HTML from the above block into index.html, then it will not parse as valid because there are intentional whitespace errors in the example block that you probably missed. It is good practice to run your HTML through a validator. Get into the habit of doing this and learning how to read the output so that you can deal with errors. Familiarize yourself with the W3C validator: https://validator.w3.org, which you can use to validate the HTML for this assignment.\n","description":"This assignment for COMP 426 will help you get through setting up tools and installing some of the basic software you will need to have for the course. It is a walkthrough for installing and setting up your development environment, including: Node.js, VIsual Studio Code, Chrome, git, and using GitHub Classroom for submissions.","id":4,"section":"assignment","tags":null,"title":"a00 This is all a setup","uri":"https://comp426.johndmart.in/assignment/a00/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"updates","tags":null,"title":"January 2019","uri":"https://comp426.johndmart.in/updates/2019_january/"},{"content":"git is a distributed version control system that keeps track of the changes between plaintext source files. It can be used for collaboration or for managing and keeping track of workflows for individuals. While primarily intended for software source code, git works with any plaintext files, and so can also be used for authoring of other kinds.\ngit basics git official documentation\nYou should become conversant with the official documentation for git. It has everything you need to know, all in one place.\ngit - The Simple Guide (Download PDF)\nThe guide above is, hands down, the best, most straightfoward guide to get you going or refresh your memory for git commands.\n[An Ultimate Guide to git and GitHub - Suhail Kakar](https://dev.to/suhailkakar/an-ultimate-guide-to- git-and-github-20j)\nGit Cheat Sheet - GitHub\nGit Tutorials and Training - Atlassian\nUsing gitignore You can place a file in the root of your repository directory named .gitignore and add paths which will be specifically excluded by git when you add files and commit changes. This is a good idea to do with Node.js packages in particular, since otherwise you are just moving around a bunch of dependencices that can be automatically downloaded by npm instead.\nHow to add folder to gitignore - Edpresso Team\nA collection of .gitignore templates\nThis is a good resource. You will likely want to add the text from Node.gitignore to your .gitignore file for most assignments.\n","description":"Save your your whole workflow (and your sanity) with git. Never lose edits again.","id":6,"section":"guide","tags":null,"title":"git","uri":"https://comp426.johndmart.in/guide/git/scm/"},{"content":"GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. It also adds a social interaction layer to the process of managing version-controlled source files.\nGitHub Basics Hello World - GitHub Guides\nKeeping GitHub forks up to date with upstream source Keeping your forked repo synced with the upstream source - Nitin Venkatesh\nSyncing a fork - GitHub Help\n","description":"Keep your git repos in the cloud for redundancy and collaboration.","id":7,"section":"guide","tags":null,"title":"GitHub","uri":"https://comp426.johndmart.in/guide/git/hub/"},{"content":"GitHub Actions allows for testing, compiling, and other workflow tasks to be performed on GitHub after you push to a repository housed there. COMP 426 uses these for autograding and other basic evaluation of assignments when you submit them. It is useful to become familiar with how it works so that you can monitor your autograded assignments when you submit them.\nGitHub Actions - GitHub Docs\n","description":"Automate a variety of test and compile workflows server-side on GitHub.","id":8,"section":"guide","tags":null,"title":"GitHub Actions","uri":"https://comp426.johndmart.in/guide/git/hubactions/"},{"content":"GitHub Classroom allows your instructors to distribute starter code for assignments, automatically create and manage repositories for student work, and automatically grade work sumbitted by push to GitHub. This is how all assignments will be managed for COMP426.\nYou can install an extension in VSCode that will let you simplify the process of accepting and submitting assignments.\nInstall GitHub Classroom extension on VSCode\n","description":"Interact with the assignments for COMP 426 in a GitHub Classroom instance.","id":9,"section":"guide","tags":null,"title":"GitHub Classroom","uri":"https://comp426.johndmart.in/guide/git/hubclassroom/"},{"content":"In this assignment, we will create a set of HTML pages that are styled using CSS.\nFollow the GitHub Classroom link for a01 listed on Piazza and Sakai. Clone the repository that it sets up for you. Just like last time, there will only be LICENSE AND README.md files in the repository when you clone it. You will create the rest of the files referenced below.\nThese pages should describe a mythological character or mythological story. The term \u0026ldquo;mythological\u0026rdquo; can be broadly interpreted and can be from any culture, time period, media universe: any mythos is fine. The content doesn\u0026rsquo;t really matter. You are encouraged to use images and video but aren\u0026rsquo;t required to do so. Be sure to link to sources (citation) if you use images or video found on the Internet. Wikimedia Commons is a good place to find images and other media that are licensed for redistribution.\n For ease of development, you are encouraged to use the browser-sync npm plugin from a00. Remember that all of your work (and commands) should be done inside of the a01-$YOURGITHUBUSERNAME folder in your workspace. It seriously makes writing and checking easier. If you do, remember to add a copy of this .gitignore file to your repository. Be sure to rename it .gitignore.\n Making a simple website The major requirements for this assignment are these:\nHTML  There should be a single logical \u0026ldquo;starting\u0026rdquo; or \u0026ldquo;home\u0026rdquo; page named index.html. This is a standard in web development because it allows the server to render it without specifying which file you want to view (why index.html). There should be at least 3 OTHER pages, not including index.html. The others can be named whatever you like. There is no maximum limit of pages, but don\u0026rsquo;t go overboard. You\u0026rsquo;re not getting extra credit for extra pages or anything. index.html should contain a link to all of your other pages. Other pages should at least contain a link back to index.html. You might also develop some sort of set of navigation links so that you can move from one page directly to others. All of the pages should use the same CSS stylesheet, which should exist as a separate file styles.css. All of your html pages should be valid HTML5 (html validator). Minor warnings about browser incompatibility are OK.  CSS This is the part of the assignment where you can get creative. Googling examples of css and best practices is a great place to start.\nEspecially for this assignment w3schools is going to be your best friend. Refer to other resources listed under guides on this site as well (and feel free to add anything that you find useful to those guides).\nAt a minimum, your stylesheet should:\n Have at least 10 selectors Use two or more fonts for different kinds of content Set the background color of some elements, specifying the color by hex notation Set the border of some elements Use the :hover pseudo-class for one or more elements Use at least one class-based selector Use at least one id-based selector Have at least one selector rely on the hierarchical relationship between two elements Use width and/or height to control the geometry of an element Validate as CSS3 using the W3C CSS validation tool (css-validator)  The autograder will check specifically for all of the above numbered parameters in your repositories. Other than these basic features, feel free to use whatever HTML5 elements and CSS3 attributes you would like. Be creative.\nDisclaimer Do not use any CSS preprocessors or libraries (e.g. Bootstrap, Bulma, etc.). You are required to write all of the css yourself. Later assignments will deal with using these libraries.\n","description":"","id":10,"section":"assignment","tags":null,"title":"a01 HTML and CSS","uri":"https://comp426.johndmart.in/assignment/a01/"},{"content":"HTML and CSS The first real assignment is meant to get you comfortable with the basics of HTML and CSS. Whether you know it very well already or if you need a refresher, going through this module and then a01 should put you in a good position to continue through the rest of the assignments.\nKnowing these markup languages is very important for being a good web developer. Both HTML and CSS are straightforward and well-documented.\nWeb langauges and platforms and frameworks change very rapidly and you will, as a web developer, spend a career learning new languages and platforms and frameworks. You will constantly be learning and teaching yourself new things. If you take no other lessons away from this class, take this one: get comfortable looking things up and learning things on your own. It is the only way.\nThe list of resources belows, for example, are the kinds of things that you will want to learn how to find online. Google. Everything.\nHTML describes the web page\u0026rsquo;s structure while CSS describes how that structure should be styled. We are going to provide you a short online course so you can familiarize yourself with these two languages. In the second (after the initial setup) assignment we will be making a simple website using just HTML and CSS. Remember all the assignments are already published so you can look ahead and see what kinds of things you will be expected to do.\nIf you find anything overly confusing, ask on Piazza or reach out during office hours. We will be making it very clear what you will be expected to know for a test when it comes time for that. If you can do the upcoming HTML and CSS assignment a01 without looking things up, then you can consider yourself a genius-level expert. If you can complete a01 while referencing the endless trove of documentation available online, then you are like the rest of us and have a pretty decent working knowledge that is good enough to do web development.\nHTML and CSS is probably the most googleable topic you will ever come across in your CS career. Don\u0026rsquo;t be afraid to look things up, but make sure you aren\u0026rsquo;t just copy-pasting things from Stack Overflow either.\nRecommendations for self Study Code Academy CodeAcademy - Learn HTML and CSS\nYou will have to sign up for an account, but it is totally free. You should complete the following tutorials:\nHTML  Elements and Structure Tables (know the basics) Forms (know the basics there will be an assignment on this later) Semantic HTML (optional and not required, just make yourself familiar with it so you can sound smart if you see it at a job)  CSS  Selectors and Visual Rules The Box Model Display and Positioning Colors (optional) Typography (optional) Grid (Skip this and learn basic Flex) CSS Transitions (optional)  w3schools The w3schools site is an excellent resource for the markup and programming languages that we will be using in this course. Get comfortable working through the tutorials both as self-study resource and as a reference tool.\n w3schools HTML w3schools CSS  Mozilla Developer Network (MDN) The Mozilla Developer Network has excellent guides and documentation on all things related to web development.\n MDN HTML MDN CSS.  TutorialsPoint For those of you who just want to read things I\u0026rsquo;d check out TutorialsPoint\u0026rsquo;s pages on HTML and CSS. I don\u0026rsquo;t think the CSS one is very good and you would be better off with the Code Academy one.\nAssessment There is no graded assessment component for course modules. We will not be giving you graded quizzes or anything. However, it will be effectively impossible to successfully work through any aspect of this course going forward without famililarity manipulating, writing, and editing HTML and CSS.\nHere is a list of online quizzes that you can and should take on your own to test and evaluate your knowledge. It would behoove you to take these quizzes and then review things that you find difficult. Practice.\n GeeksforGeeks w3schools HTML Quiz w3schools CSS Quiz ProProfs HTML Quiz with Answers Khan Academy HTML/CSS Recap TutorialsPoint HTML 5 Online Quiz TutorialsPoint CSS Online Quiz CSS Portal CSS Quiz Quizizz HTML and CSS Quiz 1  ","description":"Knowing how to write, edit, and manipulate HTML and CSS is integral to web development. Here are some pointers for refreshing your HTML and CSS skills.","id":11,"section":"module","tags":null,"title":"mod01 HTML + CSS Crash Course","uri":"https://comp426.johndmart.in/module/mod01/"},{"content":"Directly writing raw, static HTML and CSS is feasible for smaller sites like the mythical one you designed for a01. But it\u0026rsquo;s easy to see how designing a website from scratch can be difficult\u0026mdash;especially for large, complex, dynamic sites containing many pages.\nAnd although every website you have ever used is ultimately expressed in terms of CSS and HTML, modern web developers typically have many tools at their disposal to help organize the code, reduce unnecessary duplication, and promote best practices. In this course, we will continue to become familiar with some of these tools.\nWhat is a framework? Frameworks are widely employed for assisting with web development. A framework is a structural code library that enforces an organizational scheme on the code that you write, with the goal of helping you to produce better software. Here are a few of the benefits of using a framework to organize your application:\n It speeds up the development process It makes your code easier to read It reduces the potential for bugs It prevents code replication It encourages you to conform to best practices It provides pre-written solutions to common tasks that you are likely to encounter   A framework is typically written for a particular language and is designed to help you write a particular type of software. For example, Angular, React, and Vue are examples of JavaScript frameworks designed to help you write organized JavaScript code for the browser. We\u0026rsquo;ll learn more about these frameworks later the semester.\n CSS frameworks for web development CSS is what we use to make the web and web-based applications look and act for the people using them. CSS frameworks jumpstart the process of developing the user interface layer of our applications.\nIn this assignment we will be exploring Bulma, an open source CSS framework designed to help you organize the way you add style to HTML pages. By linking Bulma to your HTML pages and adding a few special classes to your HTML elements, you can quickly make a webpage that looks good and follows best design practices, all without having to write any custom CSS.\n While Bulma is a great CSS framework, it\u0026rsquo;s not the only one out there. These blog posts list other CSS frameworks that are also popular right now. You are likely aware of other frameworks, such as: Bootstrap, Materialize, Foundation, and Tailwind, among others. When planning a new web app, picking a CSS framework can be difficult, and there are a lot of factors to consider. Ultimately, try to choose a framework that will allow you to rapidly produce well-designed pages.\n CSS frameworks are a quick and easy way to make pretty and functional websites, but they\u0026rsquo;re no substitute for understanding the underlying CSS rules that are being applied. For this course, it\u0026rsquo;s important to have a working understanding of the fundamentals before diving fully into using framework. This assignment is intended to get you to a place where you understand what a framework (in this case a CSS framework) does and how to integrate it into your work.\nGetting started   To get started, follow the GitHub Classroom invite link for a02, which will be listed on Sakai and Piazza.\n  As with previous assignments, clone the repository that is created for you to your local environment. It contains some starter code.\n  Some starter code has been provided for you. You should see some HTML, some custom CSS (do not edit this file at all), a list of the Bulma classes you will need to use (also listed in a table below), a directory of some images, a license, and a README file.\n  Next, open a terminal in the a02 assignment directory and initialize a new npm project for a02 using the npm init command (see a00 if you need a refresher).\n  When you initialize the npm project, fill in the fields that it prompts you to fill with information relevant to you (e.g., your name, etc). MOST IMPORTANTLY: update the license to match the license in the LICENSE file, when it prompts you to do so. Look in the LICENSE and figure out what license is in there. You can then use the [SPDX License List] to get the correct identifier that matches. If you do not do this during the init process, don\u0026rsquo;t worry! You can always edit the packages.json file after it has been created.\n  It would behoove you to add a .gitignore file to your repository so that your repo doesn\u0026rsquo;t track all the dependencies you install. This one is very good.\n  While you have the terminal open, also add Browsersync as a dependency to your new project (using the command npm install browser-sync). It will make your life easier.\n  This is a good time to use git add and git commit so that you can ensure that the new files you just created are being tracked.\n  Start Browsersync from your terminal (browser-sync start -sw) and see how the HTML files look when rendered in the browser. Since we only have the custom starter CSS, they should look pretty plain.\n  Installing Bulma In this assignment, we are going to add Bulma styles to the raw HTML provided in the assignment directory. The goal is to use Bulma to improve the way this page looks, all without writing a single line of CSS.\nSince Bulma is a CSS framework, it is essentially one giant pre-written CSS stylesheet. In order to start styling our pages with Bulma, we need to first link the HTML to the Bulma CSS. Recall from a01 that CSS stylesheets can be linked to HTML documents by adding a special \u0026lt;link\u0026gt; tag inside the \u0026lt;head\u0026gt; of the document.\nHowever, this raises an important question: where should we store the giant Bulma CSS stylesheet, and what path do we put in the \u0026lt;link href=\u0026quot;\u0026quot;\u0026gt; attribute in order to link to it?\nGenerally speaking, there are three feasible possibilities:\n  Download the Bulma CSS file manually, save it in the a02-$YOURGITHUBUSERNAME directory, and \u0026lt;link\u0026gt; to it with a relative path.\n  In the HTML file, \u0026lt;link\u0026gt; directly to an online version of the Bulma CSS file hosted by a Content Delivery Network (CDN).\n  Download the Bulma CSS file as a dependency using npm, and \u0026lt;link\u0026gt; to the downloaded file relatively from node_modules.\n   A Content Delivery Network, or CDN, is a giant network of servers geographically spread across a large region\u0026mdash;like the country, the continent, or the world. The servers in a CDN work together to deliver website data such as video, images, audio, html, etc. to users as fast and as reliably as possible. By spreading out the servers across the world, there is a greater chance that any given user will be geographically close to a CDN server. If the closest server in the network responds to a user\u0026rsquo;s request, it\u0026rsquo;s likely that the response will arrive even faster.\n These three options are discussed in more detail on the official getting started with Bulma page. Using npm to install the package as a dependency is the recommended option, so that\u0026rsquo;s what we will do for this assignment. In general, installing packages through npm is the best route when you need to add third party code to your web apps for this course.\nAdd Bulma as a dependency Therefore, to download Bulma as a dependency, run the following command from the terminal in your a02-$YOURGITHUBUSERNAME directory:\n1  $ npm install bulma    Note: You may still have Browsersync running in your terminal. Thus, to run npm install bulma, you either need to open a new terminal from the a02-$YOURGITHUBUSERNAME directory (right click your a02-$YOURGITHUBUSERNAME directory and select \u0026ldquo;Open in Terminal\u0026rdquo;), or you need to kill the Browsersync process with Ctrl + C to free up the existing terminal instance.\n Finding the Bulma stylesheet Now that Bulma has been downloaded, the next step is to connect the CSS to the HTML by adding \u0026lt;link\u0026gt; tags in the \u0026lt;head\u0026gt; of the HTML documents. But what URL should we use as the href attribute of the \u0026lt;link\u0026gt; tag? We need to look at the files that were downloaded by npm and find the correct CSS file.\nEvery time you npm install a new dependency, npm automatically downloads the requested files from the internet and puts them in a special directory named node_modules. This process occurred when you ran npm install bulma, meaning the Bulma files are now ready and waiting in the node_modules directory in your a02-$YOURGITHUBUSERNAME directory. Open node_modules now and confirm that bulma has been downloaded. When you expand the directorys, it should look something like this:\nInside of the new a02-$YOURGITHUBUSERNAME/node_modules/bulma directory is a list of files and directories that collectively make up Bulma. In particular, you\u0026rsquo;ll notice a sub-directory named css, which contains three files:\n node_modules/css/bulma.css node_modules/css/bulma.css.map node_modules/css/bulma.min.css  The two files that end in .css are exactly what we\u0026rsquo;re looking for! In fact, both bulma.css and bulma.min.css represent complete copies of the Bulma CSS source code, and either one would work for this assignment.\nWhat is the difference between the two files? bulma.min.css is a minified version of Bulma, which means the CSS code was purposefully compressed to take up as few characters as possible. All newlines and whitespace are gone from the code, meaning it has a smaller file size and is therefore faster to transfer across the internet. Your browser doesn\u0026rsquo;t need the extra whitespace, and is perfectly happy reading and understanding the minified version. However, minified code is generally much harder for humans to read!\nLinking to Bulma in HTML Now that we found the location of the Bulma CSS stylesheet, we can link it to the HTML file. The file we want is located at node_modules/bulma/css/bulma.css relative to the a02-$YOURGITHUBUSERNAME root directory.\nAdd the following line inside the \u0026lt;head\u0026gt; of the HTML document in a02:\n1  \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;node_modules/bulma/css/bulma.css\u0026#34;\u0026gt;   Make sure to place it above \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;custom_style.css\u0026quot;\u0026gt; but DO NOT remove this line. You need both.\nTHIS ONE LINE will be the only line you add to index.html. You should not add any other lines to this file.\nRevisit rendered pages Just by linking to Bulma, the provided HTML page already look much better! Go ahead and take a look. If Browsersync is not running, start it up again and head to http://localhost:3000 on Google Chrome to see the rendered version.\nBulma automatically adds default styles to your page that affect little things like the default font family, font colors, font sizes, heading sizes, paragraph spacing, etc. Though subtle, these changes are important! They were carefully chosen by the Bulma team to reflect recommended best practice for web design.\n If you\u0026rsquo;re interested in learning more about best practices for good web style and design, there are lots of online resources available in the guides pages). In particular, typography is the art of formatting text to be practical, effective, readable, and stylish.\n Adding Bulma classes The default styles added to your page by linking to Bulma are just the beginning. The real power of Bulma comes with its CSS classes. Bulma defines and styles hundreds of little utility CSS classes for use in your HTML.\nNeed to change the background color of a \u0026lt;div\u0026gt; and make it yellow? Bulma pre-defines a CSS class for that.\nNeed to add a red glow to a form input field when the user types an invalid value? There\u0026rsquo;s a class for it.\nWhat about laying content side-by-side? Or making a table pretty? Or increasing the size of the text in a particular area? Or changing the font-family? Or giving buttons different colors? Bulma has classes for all of these too.\nBulma offers too many CSS classes to cover in one assignment or project. However, you should become familiar with the official Bulma documentation, which is an excellent resource for getting to know your way around the framework and even gives code examples demonstrating what each CSS class does.\nGo to the Bulma documentation and click through the menu on the right side of the page (see screenshot below). For the next part of the assignment, you will use Bulma classes to improve the design of the provided a02 HTML document.\nSubmission requirements For this assignment, your task is to correctly add Bulma classes to the a02-$YOURGITHUBUSERNAME/index.html HTML document to make it look exactly like the screenshots linked below.\nNOTE:\n You may not change the HTML elements on the page at all, except for adding Bulma classes. You also may not add any custom CSS styles or edit custom_styles.css.  You are required to reproduce the style from the screenshots exactly. To make this easier, we have included a table below containing all the classes you\u0026rsquo;ll need to use. You\u0026rsquo;ll also notice that as a hint, some of the elements in the HTML file already have their classes defined; there is no need to add or remove classes from these elements.\n Some IDEs provide automatic autocomplete when you start typing Bulma classes. This functionality is built in to Webstorm, but if you want Bulma class autocompletion on Visual Studio Code, you\u0026rsquo;ll have to add it as an extension.\n Per usual, make sure to frequently commit your code changes in case you need to roll them back.\nWebsite Screenshots Here are screenshots of the website that you are trying to create. To get full credit on this assignment, your website must automatically match all these images by correctly using only the Bulma classes listed in the next section.\n 4k 1080p narrow mobile  Classes to Use Notice how the table below isn\u0026rsquo;t just a list of classes used, but a list of classes to be used to style individual html elements. There is no mixing and matching necessary among the rows of the table.\nFor example, when you see subtitle has-text-grey has-text-weight-light you can assume that this is styling a single html element. In this case it styles the subtitle on line 77. You won\u0026rsquo;t see combinations other than the ones listed in the table below.\n   Class List Documentation Section     button is-dark Buttons   checkbox Forms   column Columns/Layout   columns    columns is-multiline justify-center    container Layout   content Elements -\u0026gt; Content   content has-text-centered    content has-text-right    control Form   field Form   has-text-weight-bold Modifiers -\u0026gt; Typography   hero is-dark is-fullheight Layout -\u0026gt; Hero   hero-body    input Form   is-active    is-capitalized    label    notification is-danger Elements -\u0026gt; Notification   section Layout -\u0026gt; Section   section has-background-white    select    subtitle    subtitle has-text-grey    subtitle has-text-grey has-text-weight-bold    subtitle has-text-grey has-text-weight-light    subtitle has-text-grey has-text-weight-normal    subtitle has-text-grey is-italic    tabs is-medium is-centered    title    title has-text-info is-family-secondary    title has-text-weight-bold    title has-text-weight-light    title has-text-weight-normal     Wrap-up This assignment is more involved and more difficult than the previous two. We are actually getting into connecting visual elments with the code that makes them.\nWe are also getting deeper into troubleshooting and figuring out what is happening in your code.\nNothing is impossible. Take your time. Look around in the HTML before you just start editing.\nRemember the above directive that you should only add one line to index.html. That is not a recommendation. If you add other lines to the file, the tests will fail. If you edit custom_styles.css, the tests will fail.\nThe assignment will be evaulated entirely on whether you are able to apply the classes to elements within index.html. And guess what: you are capable of doing this.\nAnd we\u0026rsquo;re here to help if needed. Post your questions on Piazza and we\u0026rsquo;ll help you work through issues.\n","description":"In this assignment, you will incorporate a CSS framework into some HTML to create a web interface without having to write all of the CSS from scratch.","id":12,"section":"assignment","tags":null,"title":"a02 CSS Frameworks","uri":"https://comp426.johndmart.in/assignment/a02/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":14,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://comp426.johndmart.in/blog/markdown-syntax/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":15,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://comp426.johndmart.in/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","description":"","id":16,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://comp426.johndmart.in/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":17,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"https://comp426.johndmart.in/blog/emoji-support/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Mac running OSX.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome.\u0026rdquo; Accept the Agreement. Open the installer and follow it through completion.  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download/ Select the \u0026ldquo;Macintosh Installer\u0026rdquo; under the LTS tab. After the download completes, open the installer. Follow the installation instructions using the default settings to completion.  git - Developer Tools  Click on the Spotlight icon, the magnifying glass in the top right corner of your screen (or press Command+Space) Type in the word \u0026ldquo;Terminal\u0026rdquo; and press Enter. In the window that pops up, type in the word \u0026ldquo;git\u0026rdquo; and press enter. You will be prompted to install Command Line Developer Tools. Agree to this, even if you are on battery power. Let the installation complete.  You will also find a good guide to get started with installing git here.\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Mac zip file  Double click the downloaded \u0026ldquo;VSCode-darwin-stable.zip\u0026rdquo; file. This extracts and creates an application named \u0026ldquo;Visual Studio Code\u0026rdquo; in your downloads folder. Drag the \u0026ldquo;Visual Studio Code\u0026rdquo; file from your Downloads folder to your Applications folder. You should see the Applications folder in the left-hand sidebar of your Finder window.  Restart your computer once all software has been installed.\nReturn to a00 main page\n","description":"Instructions for installing required software on Mac OSX","id":18,"section":"guide","tags":null,"title":"Software Setup for Mac OSX","uri":"https://comp426.johndmart.in/guide/software/mac/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Windows computer.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome\u0026rdquo; Accept the Agreement Open the ChromeSetup.exe installer and press \u0026ldquo;Yes\u0026rdquo; if prompted for permission to install  node.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download Select the \u0026ldquo;Windows Installer\u0026rdquo; under the LTS tab. If given the option, select the 64-bit option.  After the download completes, open the installer. Continue through the installation screens using the default settings until the install is complete.  git and bash - Developer Tools  Follow this link: https://git-scm.com/downloads Select \u0026ldquo;Windows\u0026rdquo;  After the download completes, open it. Continue through the installation screens using the default settings until the install is complete.  You also will find a good guide to get started with installing git here.\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Windows installer  Open the downloaded installer Continue through the installation screens using the default settings until the install is complete.  Return to a00 main page\n","description":"Instructions for installing required software on Windows","id":19,"section":"guide","tags":null,"title":"Software setup for Windows","uri":"https://comp426.johndmart.in/guide/software/windows/"},{"content":"Here are some links to validators that you can use to check your assignment code. We will run all your code through a validator as part of your assignment submission. You should too.\nValidators will tell you exactly what you need to know to fix the errors in your code.\nHTML, CSS, etc. W3C Markup Validation Service (HTML)\nW3C has a bunch of different validators that can check CSS, web platforms (mobile ready), dead links, RSS, and one that checks all of these things.\nCollection of W3C validators\nJSON JSONLint - The JSON Validator\nJSON Formatter (Best JSON Formatter and Validator)\nJSON Formatter and Validator\nJavaScript JSHint, a JavaScript Code Quality Tool\nJavaScript Validator - Code Beautify\nOnline JavaScript Validator - BeautifyTools\n","description":"","id":20,"section":"guide","tags":null,"title":"Validators","uri":"https://comp426.johndmart.in/guide/validators/"}]